axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.17, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
pastDbrdaPlot1 = pastDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.22, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
pastDbrdaPlot1 = pastDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/DbrdaPlot.png", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/DbrdaPlot.pdf", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/DbrdaPlot.tiff", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
??stat_ellipse
bestDbrda$anova
knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis", "ropensci/rnaturalearthhires")
pacman::p_load("cowplot", "ggrepel", "ggspatial", "maps", "paletteer", "patchwork", "rgdal", "rnaturalearth", "sf", "tidyverse", "reshape2", "MCMC.OTU", "pairwiseAdonis", "RColorBrewer", "Redmonder", "flextable", "lubridate", "officer", "adegenet", "dendextend", "gdata", "ggdendro", "hierfstat", "Imap", "kableExtra", "poppr", "StAMPP", "vcfR", "vegan", "boa", "measurements", "magick", "rgeos", "magrittr", "ggplot2", "rstatix")
cloneBams = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData.csv")
cloneMa = as.matrix(read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/pastClones.ibsMat"))
dimnames(cloneMa) = list(cloneBams[,1],cloneBams[,1])
clonesHc = hclust(as.dist(cloneMa),"ave")
clonePops = cloneBams$region
cloneDend = cloneMa %>% as.dist() %>% hclust(.,"ave") %>%
as.dendrogram()
cloneDData = cloneDend %>% dendro_data()
cloneDData$segments$yend2 = cloneDData$segments$yend
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend2[i] == 0) {
cloneDData$segments$yend2[i] = (cloneDData$segments$y[i] - 0.01)}}
cloneDendPoints = cloneDData$labels
cloneDendPoints$pop = clonePops[order.dendrogram(cloneDend)]
rownames(cloneDendPoints) = cloneDendPoints$label
# Making points at the leaves to place symbols for populations
point = as.vector(NA)
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend[i] == 0) {
point[i] = cloneDData$segments$y[i] - 0.01
} else {
point[i] = NA}}
cloneDendPoints$y = point[!is.na(point)]
techReps = c("P028-1", "P028-2", "P028-3", "P046-1", "P046-2", "P046-3", "P077-1", "P077-2", "P077-3")
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
cloneDendPoints$pop = factor(cloneDendPoints$pop)
cloneDendPoints$pop = factor(cloneDendPoints$pop,levels(cloneDendPoints$pop)[c(4,3,5,1,2)])
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = pop), size = 4, stroke = 0.25, shape = 24) +
scale_fill_manual(values = flPal, name = "Population") +
geom_hline(yintercept = 0.165, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = (x + 0.53), y = (y - .0055), label = "*"), angle = 90, size = 10) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .010), label = "label"), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 16, color = "black", angle = 90),
axis.text.y = element_text(size = 14, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "bottom")
cloneDend
View(cloneBams)
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = pop), size = 4, stroke = 0.25, shape = 24) +
scale_fill_manual(values = flPal, name = "Population") +
geom_hline(yintercept = 0.165, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = (x + 0.53), y = (y - .0055), label = "*"), angle = 90, size = 10) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .010), label = "tube_ID"), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 16, color = "black", angle = 90),
axis.text.y = element_text(size = 14, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "bottom")
cloneDend
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = pop), size = 4, stroke = 0.25, shape = 24) +
scale_fill_manual(values = flPal, name = "Population") +
geom_hline(yintercept = 0.165, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = (x + 0.53), y = (y - .0055), label = "*"), angle = 90, size = 10) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .010), label = tube_ID), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 16, color = "black", angle = 90),
axis.text.y = element_text(size = 14, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "bottom")
cloneDend
View(cloneDendPoints)
cloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = pop), size = 4, stroke = 0.25, shape = 24) +
scale_fill_manual(values = flPal, name = "Population") +
geom_hline(yintercept = 0.165, color = "red", lty = 5, size = 0.75) + # creating a dashed line to indicate a clonal distance threshold
geom_text(data = subset(cloneDendPoints, subset = label %in% techReps), aes(x = (x + 0.53), y = (y - .0055), label = "*"), angle = 90, size = 10) + # spacing technical replicates further from leaf
geom_text(data = subset(cloneDendPoints, subset = !label %in% techReps), aes(x = x, y = (y - .010), label = label), angle = 90) +
labs(y = "Genetic distance (1 - IBS)") +
theme_classic()
cloneDend = cloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 16, color = "black", angle = 90),
axis.text.y = element_text(size = 14, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "bottom")
cloneDend
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/cloneDend_GENOME.png", plot = cloneDend, height = 5, width = 16, units = "in", dpi = 300)
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/cloneDend_GENOME.eps", plot = cloneDend, height = 5, width = 16, units = "in", dpi = 300)
knitr::opts_chunk$set(echo = TRUE)
pastVcf = read.vcfR("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/pastNoClones.bcf", verbose = FALSE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis", "ropensci/rnaturalearthhires")
pacman::p_load("cowplot", "ggrepel", "ggspatial", "maps", "paletteer", "patchwork", "rgdal", "rnaturalearth", "sf", "tidyverse", "reshape2", "MCMC.OTU", "pairwiseAdonis", "RColorBrewer", "Redmonder", "flextable", "lubridate", "officer", "adegenet", "dendextend", "gdata", "ggdendro", "hierfstat", "Imap", "kableExtra", "poppr", "StAMPP", "vcfR", "vegan", "boa", "measurements", "magick", "rgeos", "magrittr", "ggplot2", "rstatix")
pastVcf = read.vcfR("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/pastNoClones.bcf", verbose = FALSE)
pastGenlightPopulation = vcfR2genlight(pastVcf, n.cores = 1)
locNames(pastGenlightPopulation) = paste(pastVcf@fix[,1],pastVcf@fix[,2],sep="_")
popData = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "pop" = region)
strata(pastGenlightPopulation) = data.frame(popData)
setPop(pastGenlightPopulation) = ~pop
pastGenlightPopulation$pop = factor(pastGenlightPopulation$pop)
levels(pastGenlightPopulation$pop)
pastGenlightPopulation$pop = factor(pastGenlightPopulation$pop,
levels(pastGenlightPopulation$pop)[c(4, 1, 2, 3, 5)])
set.seed(694)
sefl.fst <- stamppFst(pastGenlightPopulation, nboots = 99, percent = 95, nclusters = 2)
sefl.fst$Fsts
sefl.fst$Pvalues
pop.order = c("Pompano/LBTS", "Boynton Beach", "West Palm Beach", "Jupiter", "St. Lucie Reef")
#reads in Fst matrix
snpFstMa <- as.matrix(sefl.fst$Fsts)
upperTriangle(snpFstMa, byrow = TRUE) <- lowerTriangle(snpFstMa)
snpFstMa <- snpFstMa[,pop.order] %>% .[pop.order,]
snpFstMa[upper.tri(snpFstMa)] <- NA
snpFstMa <- as.data.frame(snpFstMa)
snpFstMa$Pop = factor(row.names(snpFstMa))
snpQMa <- as.matrix(sefl.fst$Pvalues)
upperTriangle(snpQMa, byrow=TRUE) <- lowerTriangle(snpQMa)
snpQMa <- snpQMa[,pop.order] %>%
.[pop.order,]
snpQMa[upper.tri(snpQMa)] <- NA
snpQMa <- as.data.frame(snpQMa)
snpQMa$Pop = factor(row.names(snpQMa), levels = unique(pop.order))
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = FALSE)
snpFst$Fst = round(snpFst$Fst, 3)
snpFst = snpFst %>% mutate(Fst = replace(Fst, Fst < 0, 0))
snpQ = melt(snpQMa, id.vars = "Pop", value.name = "Pval", variable.name = "Pop2", na.rm = FALSE)
snpQ$Qval = p.adjust(snpQ$Pval, method = "BH")
snpFst$region = snpFst$Pop
snpFst$region = factor(gsub("\\n.*", "", snpFst$region))
snpFst$region = factor(snpFst$region, levels = levels(snpFst$region)[c(4, 2, 5, 1, 3)])
snpFst$region2 = snpFst$Pop2
snpFst$region2 = factor(gsub("\\n.*", "", snpFst$region2))
snpFst$region2 = factor(snpFst$region2, levels = levels(snpFst$region2)[c(4, 2, 5, 1, 3)])
snpFst$Fst = sprintf('%.3f', snpFst$Fst)
snpFst$Fst = factor(gsub("\\NA", NA, snpFst$Fst))
snpFst$Fst = factor(gsub("\\.000", "", snpFst$Fst))
snpFst$Fst = factor(gsub("\\-", "", snpFst$Fst))
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = as.numeric(as.character(Fst))))+
geom_tile(color = "white") +
geom_segment(data = snpFst, aes(x = 0.48, xend = -1.62, y = Pop, yend = Pop, color = region), size = 19) +
geom_segment(data = snpFst, aes(x = Pop2, xend = Pop2, y = 0.45, yend = -0.6, color = region2), size = 62.5) +
scale_color_manual(values = flPal[], guide = NULL) +
scale_fill_gradient(low = "white", high = "red", limit = c(0, 0.07), space = "Lab", name = expression(paste(italic("F")[ST])), na.value = "white",  guide = "colourbar") +
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5), fontface = ifelse (snpQ$Qval < 0.05, "bold", "plain")) +
guides(fill = guide_colorbar(barwidth = 12, barheight = 1, title.position = "top", title.hjust = 0.5)) +
scale_y_discrete(position = "left") +
scale_x_discrete(limits = rev(levels(snpFst$Pop))[c(1:5)]) +
coord_cartesian(xlim = c(1, 4), ylim = c(1, 4), clip = "off") +
theme_minimal()
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = as.numeric(as.character(Fst))))+
geom_tile(color = "white") +
geom_segment(data = snpFst, aes(x = 0.48, xend = -1.62, y = Pop, yend = Pop, color = region), size = 19) +
geom_segment(data = snpFst, aes(x = Pop2, xend = Pop2, y = 0.45, yend = -0.6, color = region2), size = 62.5) +
scale_color_manual(values = flPal[], guide = NULL) +
scale_fill_gradient(low = "white", high = "red", limit = c(0, 0.07), space = "Lab", name = expression(paste(italic("F")[ST])), na.value = "white",  guide = "colourbar") +
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5), fontface = ifelse (snpQ$Qval < 0.05, "bold", "plain")) +
guides(fill = guide_colorbar(barwidth = 12, barheight = 1, title.position = "top", title.hjust = 0.5)) +
scale_y_discrete(position = "left") +
scale_x_discrete(limits = rev(levels(snpFst$Pop))[c(1:5)]) +
coord_cartesian(xlim = c(1, 4), ylim = c(1, 4), clip = "off") +
theme_minimal()
snpHeatmap = snpHeatmapA + theme(
axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
plot.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
legend.position = c(0.7, 0.87),
legend.direction = "horizontal",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16))
snpHeatmap
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/figures/fstHeatMap_GENOME.png", plot = snpHeatmap, width = 30, height = 9, units = "cm", dpi = 300)
popData = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Population" = region)
popData$Population[popData$Population=="Pompano/LBTS"]<-"Ft. Lauderdale"
popData$a = c(0:35)
popData$Population = factor(popData$Population)
levels(popData$Population)
popData$Population = factor(popData$Population, levels = levels(popData$Population)[c(4, 3, 5, 1, 2)])
hetAll = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/hetAllSites")
colnames(hetAll) = c("sample", "All")
hetAll$sample = popData$sample
HetSNPs = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/HetSNPs")
colnames(HetSNPs) = c("sample", "SNPs")
HetSNPs$sample = popData$sample
pastBreed = read.delim("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/newres")
pastBreed2 = pastBreed %>% group_by(a) %>% select("inbreed" = Fa)
pastBreed3 = pastBreed %>% group_by(b) %>% select("inbreed" = Fb)
pastBreed = bind_rows(pastBreed2, pastBreed3) %>% group_by(a) %>% summarise("inbreed" = mean(inbreed))
pastRelate = read.delim("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/newres")
pastRelate2 = pastRelate %>% group_by(a, b) %>% select("relate" = rab)
pastRelate2 = pastRelate2 %>% left_join(popData, by = "a") %>% left_join(popData, by = c("b" = "a"), suffix = c(".a", ".b"))
pastRelate = pastRelate2 %>% filter(Population.a == Population.b) %>% rename(Population = Population.a)
het = left_join(popData, hetAll, by = "sample") %>% left_join(HetSNPs, by = "sample") %>% mutate("inbreed" = pastBreed$inbreed)
hetStats = het %>% group_by(Population) %>% dplyr::summarise(N = n(), meanAll = mean(All), sdAll = sd(All), seAll = sd(All)/sqrt(N), meanSnps = mean(SNPs), sdSnps = sd(SNPs), seSnps = sd(SNPs)/sqrt(N), meanInbreed = mean(inbreed), sdInbreed = sd(inbreed), seInbreed = sd(inbreed)/sqrt(N))
min(hetStats$meanAll, na.rm = TRUE)
max(hetStats$meanAll, na.rm = TRUE)
min(hetStats$meanSnps, na.rm = TRUE)
max(hetStats$meanSnps, na.rm = TRUE)
hetAllLm = lm(data = het, All~Population)
hetSnpLm = lm(data = het, SNPs~Population)
inbreedLm = lm(data = het, inbreed~Population)
relateLm = lm(data = pastRelate, relate~Population)
hetAllANOVA = summary(aov(hetAllLm))
hetAllANOVA
hetAllpwc <- het %>% tukey_hsd(All~Population)
hetAllpwc
hetAllpwc
head(hetAllpwc)
hetAllpwc
hetSnpANOVA = summary(aov(hetSnpLm))
hetSnpANOVA
hetSnppwc <- het %>% tukey_hsd(SNPs~Population)
hetSnppwc
inbreedANOVA = summary(aov(inbreedLm))
inbreedANOVA
inbreedpwc <- het %>% tukey_hsd(inbreed~Population)
inbreedpwc
relateANOVA = summary(aov(relateLm))
relateANOVA
relatepwc<- aov(relate ~ Population, data = pastRelate) %>% tukey_hsd()
relatepwc
hetTab = hetStats
hetSnpANOVA
inbreedANOVA
relateANOVA
hetMelt = melt(het, id.vars = c("sample", "Population"), variable.name = "type", value.name = "heterozygosity")
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
hetTheme = theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 10),
axis.ticks.y = element_line(color = "black"),
legend.position = "right",
legend.key.size = unit(0.5, 'cm'),
panel.border = element_rect(color = "black"),
#        panel.background = element_rect(fill = "white"),
#        plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
dodge <- position_dodge(width = 1)
hetAll_comp <- list( c("Jupiter", "Ft. Lauderdale") )
hetPlotAll = ggplot(data = subset(hetMelt, subset = hetMelt$type == "All"), aes(x = Population, y = heterozygosity, fill = Population)) +
geom_point(aes(color = Population),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Population") +
ylab("Heterozygosity") +
ggtitle("All loci") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = hetAll_comp, label = "p.signif", label.y = c(0.0048))
library(ggpubr)
hetPlotAll = ggplot(data = subset(hetMelt, subset = hetMelt$type == "All"), aes(x = Population, y = heterozygosity, fill = Population)) +
geom_point(aes(color = Population),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Population") +
ylab("Heterozygosity") +
ggtitle("All loci") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = hetAll_comp, label = "p.signif", label.y = c(0.0048))
hetSnp_comp <- list( c("Jupiter", "Ft. Lauderdale") )
hetPlotSnps = ggplot(data = subset(hetMelt, subset = hetMelt$type == "SNPs"),aes(x = Population, y = heterozygosity, fill = Population)) +
geom_point(aes(color = Population),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Population") +
ylab("Heterozygosity") +
ggtitle("SNPs") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = hetSnp_comp, label = "p.signif", label.y = c(0.43))
inbreed_comp <- list( c("St. Lucie Reef", "Jupiter"), c("Jupiter", "Ft. Lauderdale"), c("West Palm Beach", "Ft. Lauderdale"), c("Boynton Beach", "Ft. Lauderdale") )
inbreedingPlot = ggplot(data = het, aes(x = Population, y = inbreed, fill = Population)) +
geom_point(aes(color = Population), shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
coord_cartesian(ylim = c(0, 0.135)) +
xlab("Population") +
ylab("Inbreeding coefficient") +
ggtitle("Inbreeding") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = inbreed_comp, label = "p.signif", label.y = c(0.07, 0.107, 0.12, 0.09))
relatePlot = ggplot(data = pastRelate, aes(x = Population, y = relate, fill = Population)) +
geom_point(aes(color = Population),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Population") +
ylab("Relatedness") +
ggtitle("Relatedness") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme
hetPlots = ((hetPlotAll | hetPlotSnps) / (inbreedingPlot | relatePlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
hetPlots
hetAllpwc
hetSnppwc
inbreedpwc
relatepwc
relateANOVA
hetTab = hetStats
inbreed_comp <- list( c("Jupiter", "Ft. Lauderdale"), c("West Palm Beach", "Ft. Lauderdale"), c("Boynton Beach", "Ft. Lauderdale") )
inbreedingPlot = ggplot(data = het, aes(x = Population, y = inbreed, fill = Population)) +
geom_point(aes(color = Population), shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
coord_cartesian(ylim = c(0, 0.135)) +
xlab("Population") +
ylab("Inbreeding coefficient") +
ggtitle("Inbreeding") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = inbreed_comp, label = "p.signif", label.y = c(0.107, 0.12, 0.09))
relatePlot = ggplot(data = pastRelate, aes(x = Population, y = relate, fill = Population)) +
geom_point(aes(color = Population),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Population") +
ylab("Relatedness") +
ggtitle("Relatedness") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme
hetPlots = ((hetPlotAll | hetPlotSnps) / (inbreedingPlot | relatePlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
hetPlots
inbreedpwc
