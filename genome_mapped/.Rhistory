knitr::opts_chunk$set(echo = TRUE)
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis", "ropensci/rnaturalearthhires")
pacman::p_load("cowplot", "ggrepel", "ggspatial", "maps", "paletteer", "patchwork", "rgdal", "rnaturalearth", "sf", "tidyverse", "reshape2", "MCMC.OTU", "pairwiseAdonis", "RColorBrewer", "Redmonder", "flextable", "lubridate", "officer", "adegenet", "dendextend", "gdata", "ggdendro", "hierfstat", "Imap", "kableExtra", "poppr", "StAMPP", "vcfR", "vegan", "boa", "measurements", "magick", "rgeos", "magrittr", "ggplot2", "rstatix")
pastVcf = read.vcfR("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/pastNoClones.bcf", verbose = TRUE)
#convert to genlight files for poppr
pastGenlightPopulation = vcfR2genlight(pastVcf, n.cores = 1)
popData = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "pop" = region)
strata(pastGenlightPopulation) = data.frame(popData)
setPop(pastGenlightPopulation) = ~pop
#Runs AMOVA looking at samples by region
amova <- poppr.amova(pastGenlightPopulation, ~pop)
amova
set.seed(694)
amovasignif <- randtest(amova, nrepet = 99)
amovasignif$names
amovasignif$obs
amovasignif$pvalue
amovaPerc = paste(round(amova$componentsofcovariance$`%`[1], 2), "%",sep="")
amovaP = amovasignif$pvalue[3]
amovaPerc
amovaP
options(sdmpredictors_datadir="data_files/bioOracle", timeout = max(300, getOption("timeout")))
library(sdmpredictors)
library(tidyverse)
library(vegan)
datasets = list_datasets(terrestrial = FALSE, marine = TRUE)
present = list_layers(datasets) %>% dplyr::select(dataset_code, layer_code, name, units, description, contains("cellsize"), version) %>% filter(version == 2.2) %>% filter(layer_code %in% c("BO22_parmean", "BO22_ph", "BO22_dissoxmean_bdmean", "BO22_salinitymean_bdmean", "BO22_nitratemean_bdmean"))
envVar = load_layers(present$layer_code)
envVar = load_layers(present$layer_code)
popData=read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Population" = region, "depth" = collection_depth_m, "lat" = site_lat, "lon" = site_long)
options(sdmpredictors_datadir="data_files/bioOracle", timeout = max(300, getOption("timeout")))
popData=read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Population" = region, "depth" = collection_depth_m, "lat" = site_lat, "lon" = site_long)
popData=read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Population" = region, "depth" = collection_depth_m, "lat" = site_lat, "lon" = site_long)
popData$Population[popData$Population=="Pompano/LBTS"]<-"Ft. Lauderdale"
envData = data.frame(popData, raster::extract(envVar, popData[,5:4]))
envData = data.frame(popData, raster::extract(envVar, popData[,5:4]))
library(Hmisc)
library(reshape2)
#moving forward with variables with collinearities less than 0.7
#vif won't run w calcite or carbon phyto mean, must also have collinearities?
envData2 = envData %>% select(depth, lat, BO22_nitratemean_bdmean)
vif = diag(solve(cor(envData2)))
vif
pastMa = as.matrix(read.table("data_files/pastNoClones.ibsMat"))
rda1 = dbrda(pastMa ~ ., data = envData2)
RsquareAdj(rda1)
anova.cca(rda1)
rda0 = dbrda(pastMa ~ 1, data = envData2)
rda1 = dbrda(pastMa ~ ., data = envData2)
set.seed(092)
bestDbrda <- ordiR2step(rda0, rda1)
bestDbrda$anova
#nitrate not selected for in best model, so removing at this step
#PAR deemed not ecologically relevant after further examination
model = envData2 %>% dplyr::select("Depth" = depth, "Latitude" = lat)
pastDbrda = dbrda(pastMa ~ Depth + Latitude, model)
pastRdaVar = round(pastDbrda$CA$eig/sum(pastDbrda$CA$eig)*100, 1)
head(pastRdaVar)
pastRdaPoints = as.data.frame(scores(pastDbrda)$sites)
pastRdaPoints$sample = popData$sample
head(pastRdaPoints)
pastDbrdaData1 = popData %>% left_join(pastRdaPoints)
head(pastDbrdaData1)
tail(pastDbrdaData1)
envLoad = as.data.frame(pastDbrda$CCA$biplot)
envLoad$var = row.names(envLoad)
pastDbrdaData = merge(pastDbrdaData1, aggregate(cbind(mean.x = dbRDA1, mean.y = dbRDA2)~Population, pastDbrdaData1, mean), by="Population")
pastDbrdaData$Population = factor(pastDbrdaData$Population)
levels(pastDbrdaData$Population)
pastDbrdaData$Population = factor(pastDbrdaData$Population, levels(pastDbrdaData$Population)[c(4, 3, 5, 1, 2)])
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.22, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
pastDbrdaPlot1 = pastDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/figures/DbrdaPlot.png", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
#add bg = "transparent" to export with no background color
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/figures/DbrdaPlot.tiff", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
# packages: paletteer, tidyverse, reshape2
#kColPal3 = paletteer_d("LaCroixColoR::PassionFruit")[c(2,3,6)] #A
#kColPal3 = paletteer_d("LaCroixColoR::Mango")[c(3,5,6)] #B
#kColPal3 = paletteer_d("LaCroixColoR::Berry")[c(1,3,6)] #C
#kColPal3 = paletteer_d("LaCroixColoR::Apricot")[c(2,3,6)] #E
#kColPal3 = paletteer_d("LaCroixColoR::KiwiSandia")[c(3,5,7)] #G
kColPal3 = paletteer_d("LaCroixColoR::MurePepino")[c(3,4,6)]#H
#flPal = paletteer_d("rcartocolor::Sunset")[c(7, 6, 4, 3, 1)]
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
admixpops = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Region" = region)
knitr::opts_chunk$set(echo = TRUE)
# setup rmarkdown environment first
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = 'left')
options(timeout=600)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
bayescan = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/seflpast.baye_fst.txt",header=T) %>% mutate(loc = rownames(.), out.05 = ifelse(qval < 0.05, 1, 0), out.1 = ifelse(qval < 0.1, 1, 0))
bayescan = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/seflpast.baye_fst.txt",header=T) %>% mutate(loc = rownames(.), out.05 = ifelse(qval < 0.05, 1, 0), out.1 = ifelse(qval < 0.1, 1, 0))
bayescan[bayescan[, 3]<=0.0001, 3] = 0.0001
bayeScEnv = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/seflpast.bayeS_fst.txt", header=T) %>% filter(qval_g < 0.05) %>% mutate(loc = rownames(.), depthOut = 1) %>% select(loc, depthOut)
bayescan = bayescan %>% left_join(bayeScEnv)
bayescan$depthOut = bayescan$depthOut %>% replace_na(0)
sum(bayescan$out.05)
sum(bayescan$out.1)
sum(bayescan$depthOut)
for(i in 1:nrow(bayescan)){
if(bayescan$depthOut[i] == 1){
bayescan$out.05[i] = 2
}
}
bayescanPlotA = ggplot(data = bayescan, aes(x = log10(qval), y = fst, color = as.factor(out.05), alpha = as.factor(out.05))) +
geom_point(size = 1) +
geom_vline(xintercept = log10(0.05), linetype = 2, color = "purple") +
xlab(expression(log[10]*"("*italic("q")*"-value)")) +
ylab(expression(italic("F")[ST])) +
scale_x_reverse() +
scale_color_manual(values = c("grey45", "purple", "pink")) +
scale_alpha_manual(values = c(0.25, 0.25, 0.5)) +
theme_bw()
bayescanPlot = bayescanPlotA +
theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12),
axis.ticks.x = element_line(color = "black"),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 10),
axis.ticks.y = element_line(color = "black"),
legend.position = "none",
legend.key.size = unit(0.3, 'cm'),
panel.border = element_rect(color = "black"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
bayescanPlot
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/figures/outliers.pdf", plot = bayescanPlot, width = 14, height = 8, units = "cm", dpi = 300)
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/figures/outliers.png", plot = bayescanPlot, width = 14, height = 8, units = "cm", dpi = 300)
bayescan = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/seflpast.baye_fst.txt",header=T) %>% mutate(loc = rownames(.), out.05 = ifelse(qval < 0.05, 1, 0), out.1 = ifelse(qval < 0.1, 1, 0))
bayescan[bayescan[, 3]<=0.0001, 3] = 0.0001
bayeScEnv = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/data_files/seflpast.bayeS_fst.txt", header=T) %>% filter(qval_g < 0.05) %>% mutate(loc = rownames(.), depthOut = 1) %>% select(loc, depthOut)
bayescan = bayescan %>% left_join(bayeScEnv)
bayescan$depthOut = bayescan$depthOut %>% replace_na(0)
sum(bayescan$out.05)
sum(bayescan$out.1)
sum(bayescan$depthOut)
for(i in 1:nrow(bayescan)){
if(bayescan$depthOut[i] == 1){
bayescan$out.05[i] = 2
}
}
bayescanPlotA = ggplot(data = bayescan, aes(x = log10(qval), y = fst, color = as.factor(out.05), alpha = as.factor(out.05))) +
geom_point(size = 1) +
geom_vline(xintercept = log10(0.05), linetype = 2, color = "purple") +
xlab(expression(log[10]*"("*italic("q")*"-value)")) +
ylab(expression(italic("F")[ST])) +
scale_x_reverse() +
scale_color_manual(values = c("grey45", "purple", "pink")) +
scale_alpha_manual(values = c(0.25, 0.25, 0.5)) +
theme_bw()
bayescanPlot = bayescanPlotA +
theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12),
axis.ticks.x = element_line(color = "black"),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 10),
axis.ticks.y = element_line(color = "black"),
legend.position = "none",
legend.key.size = unit(0.3, 'cm'),
panel.border = element_rect(color = "black"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
bayescanPlot
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/figures/outliers.pdf", plot = bayescanPlot, width = 14, height = 8, units = "cm", dpi = 300)
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/figures/outliers.png", plot = bayescanPlot, width = 14, height = 8, units = "cm", dpi = 300)
