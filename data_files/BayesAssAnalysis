## M I G R A T I O N &nbsp; M O D E L I N G
To use BayesAss3 (XXX) we first need to convert our ANGSD output into genotype format
```{bash, bayesass}
cd~/2bRAD/past/sefl
mkdir bayesAss

cd bayesAss
cp ../ANGSD/pastNoClones.bcf .
cp ../bayescan/seflPastBsPops.txt .

echo "# VCF Parser questions
PARSER_FORMAT=VCF

# Only output SNPs with a phred-scaled quality of at least:
VCF_PARSER_QUAL_QUESTION=
# Select population definition file:
VCF_PARSER_POP_FILE_QUESTION=./seflPastBsPops.txt
# What is the ploidy of the data?
VCF_PARSER_PLOIDY_QUESTION=DIPLOID
# Do you want to include a file with population definitions?
VCF_PARSER_POP_QUESTION=true
# Output genotypes as missing if the phred-scale genotype quality is below:
VCF_PARSER_GTQUAL_QUESTION=
# Do you want to include non-polymorphic SNPs?
VCF_PARSER_MONOMORPHIC_QUESTION=false
# Only output following individuals (ind1, ind2, ind4, ...):
VCF_PARSER_IND_QUESTION=
# Only input following regions (refSeqName:start:end, multiple regions: whitespace separated):
VCF_PARSER_REGION_QUESTION=
# Output genotypes as missing if the read depth of a position for the sample is below:
VCF_PARSER_READ_QUESTION=
# Take most likely genotype if "PL" or "GL" is given in the genotype field?
VCF_PARSER_PL_QUESTION=true
# Do you want to exclude loci with only missing data?
VCF_PARSER_EXC_MISSING_LOCI_QUESTION=true

# Immanc (BayesAss) Writer questions
WRITER_FORMAT=IMMANC

# Specify the locus/locus combination you want to write to the Immanc (BayesAss) file:
IMMANC_WRITER_LOCUS_COMBINATION_QUESTION=
# Specify which data type should be included in the Immanc (BayesAss)) file (Immanc (BayesAss) can only analyze one data type per file):
IMMANC_WRITER_DATA_TYPE_QUESTION=SNP" >seflPastBA.spid

module load pgdspider-2.1.1.2-gcc-9.2.0-ghxvd4c

pgdSpider=/opt/ohpc/pub/spack/opt/spack/linux-centos7-x86_64/gcc-9.2.0/pgdspider-2.1.1.2-ghxvd4c4ieqngkbutakc7x6j4pfkqm5e/bin/PGDSpider2-cli.jar

echo '#!/bin/bash' > pgdSpider.sh
echo "java -Xmx1024m -Xms512m -jar $pgdSpider -inputformat VCF -outputformat IMMANC vcf -inputfile pastNoClones.bcf -outputfile seflPastBayesAss.txt -spid seflPastBA.spid" >>pgdSpider.sh

sbatch -e pgdSpider.e%j -o pgdSpider.o%j -p mediumq7 --mail-user eshilling2013@fau.edu --mail-type=ALL pgdSpider.sh

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Default params:
#MCMC reps: 1,000,000
#burn in: 100,000
#sampling freq: 100
#delta migration (1): 0.1
#delta allele freq (3): 0.1
#delta inbreeding (4): 0.1

## Herrera params:
#MCMC reps: 100,000,000
#burn in: 50,000,000
#sampling freq: 1,000
#delta migration: 0.35
#delta allele freq: 0.9
#delta inbreeding: 0.09

#Ryan says maybe try 5 or 10 mil for MCMC reps for mine to start, 1 million burn in

rm pastNoClones.bcf
rm seflPastBsPops.txt

module load gcc-9.2.0-gcc-8.3.0-ebpgkrt gsl-2.5-gcc-9.2.0-i6lf4jb netlib-lapack-3.9.1-gcc-9.2.0-gcqg2b2 BayesAss/3.0.4.2

# Run a test with verbose [-v] output to see the acceptance rates in the terminal (takes a few minutes to compute)
# check the output file [less BATest.o*] and kill the job once you get output with acceptance rates [scancel {yourJobID}]
# After ~10—15 min you should start seeing output in the BATest.o* file

echo '#!/bin/bash' > BATest
echo BA3SNP -v -i 5000000 -b 500000 -n 100 seflPastBayesAss.txt >> BATest

sbatch -e BATest.e%j -o BATest.o%j -p shortq7 --mail-user eshilling2013@fau.edu --mail-type=ALL BATest
#logL: -519655.06 % done: [0.02] % accepted: (0.69, 0.00, 0.90, 0.01, 0.74)
#looking only at first, third & fourth values^
#need to lower first two parameters, so increase -m and -a
#increase the third, so lower -f

# we are looking for 20—60% acceptance, ideally somewhere near 20—30%
# relationships between mixing parameters and acceptance rates are inverse
# defaults are 0.1 (all parameters are scale 0—1)
# increase [-m] increase [-a] and decrease [-f]

echo '#!/bin/bash' > BATest
echo BA3SNP -v -i 5000000 -b 500000 -n 1000 -m 0.2 -a 0.6 -f 0.04 seflPastBayesAss.txt >> BATest

sbatch -e BATest.e%j -o BATest.o%j -p shortq7 --mail-user eshilling2013@fau.edu --mail-type=ALL BATest
#logL: -526845.62 % done: [0.00] % accepted: (0.50, 0.00, 0.45, 0.02, 0.76)

echo '#!/bin/bash' > BATest
echo BA3SNP -v -i 5000000 -b 500000 -n 1000 -m 0.25 -a 0.63 -f 0.01 seflPastBayesAss.txt >> BATest

sbatch -e BATest.e%j -o BATest.o%j -p shortq7 --mail-user eshilling2013@fau.edu --mail-type=ALL BATest
#logL: -527036.53 % done: [0.00] % accepted: (0.43, 0.00, 0.43, 0.07, 0.76)

echo '#!/bin/bash' > BATest
echo BA3SNP -v -i 5000000 -b 500000 -n 1000 -m 0.25 -a 0.63 -f 0.005 seflPastBayesAss.txt >> BATest

sbatch -e BATest.e%j -o BATest.o%j -p shortq7 --mail-user eshilling2013@fau.edu --mail-type=ALL BATest
#logL: -527039.60 % done: [0.00] % accepted: (0.43, 0.00, 0.44, 0.15, 0.76)

echo '#!/bin/bash' > BATest
echo BA3SNP -v -i 5000000 -b 500000 -n 1000 -m 0.25 -a 0.63 -f 0.001 seflPastBayesAss.txt >> BATest

sbatch -e BATest.e%j -o BATest.o%j -p shortq7 --mail-user eshilling2013@fau.edu --mail-type=ALL BATest
#logL: -527035.22 % done: [0.00] % accepted: (0.43, 0.00, 0.44, 0.50, 0.76)

echo '#!/bin/bash' > BATest
echo BA3SNP -v -i 5000000 -b 500000 -n 1000 -m 0.26 -a 0.64 -f 0.002 seflPastBayesAss.txt >> BATest

sbatch -e BATest.e%j -o BATest.o%j -p shortq7 --mail-user eshilling2013@fau.edu --mail-type=ALL BATest
#logL: -527013.76 % done: [0.00] % accepted: (0.42, 0.00, 0.43, 0.32, 0.76)

echo '#!/bin/bash' > BATest
echo BA3SNP -v -i 5000000 -b 500000 -n 1000 -m 0.28 -a 0.7 -f 0.002 seflPastBayesAss.txt >> BATest

sbatch -e BATest.e%j -o BATest.o%j -p shortq7 --mail-user eshilling2013@fau.edu --mail-type=ALL BATest
#logL: -526952.00 % done: [0.00] % accepted: (0.40, 0.00, 0.40, 0.32, 0.76)

echo '#!/bin/bash' > BATest
echo BA3SNP -v -i 5000000 -b 500000 -n 1000 -m 0.32 -a 0.75 -f 0.002 seflPastBayesAss.txt >> BATest

sbatch -e BATest.e%j -o BATest.o%j -p shortq7 --mail-user eshilling2013@fau.edu --mail-type=ALL BATest
#logL: -526874.47 % done: [0.00] % accepted: (0.36, 0.00, 0.38, 0.32, 0.76)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Make and launch 10 iterations of BayesAss, each in its own run directory so we can keep all trace files (saved as 'BA3trace.txt' and would overwrite if not in separate directories). We are using [-s $RANDOM] to use a random start seed for each independent run

module load gcc-9.2.0-gcc-8.3.0-ebpgkrt gsl-2.5-gcc-9.2.0-i6lf4jb netlib-lapack-3.9.1-gcc-9.2.0-gcqg2b2 BayesAss/3.0.4.2

for i in {01..10}; do
echo '#!/bin/bash' > BayesAss$i.sh
echo BA3SNP -v -u -s $RANDOM -i 5000000 -b 500000 -n 100 -m 0.32 -a 0.75 -f 0.002 -t -o seflPastBARun${i}Out.txt ../seflPastBayesAss.txt >> BayesAss$i.sh;
mkdir run$i;
mv BayesAss$i.sh run$i;
cd run$i;
sbatch -e BayesAss$i.e%j -o BayesAss$i.o%j -p longq7 --mem=100GB --exclusive --mail-user eshilling2013@fau.edu --mail-type=ALL BayesAss$i.sh
cd ..;
done

##ran in ~20 hours

# after all runs complete copy files to main BayesAss directory
cd ~/2bRAD/past/sefl/bayesAss

cp run*/*Out.txt .

for i in {01..10}; do
cp run$i/BA3trace.txt BA3trace$i.txt;
done

##looks like we can run with 10,000,000 reps, 2,000,000 burn in from Trace examination
##so going to re-check that my deltas still work when running it with these new parameters

echo '#!/bin/bash' > BATest
echo BA3SNP -v -i 10000000 -b 2000000 -n 1000 -m 0.32 -a 0.75 -f 0.002 seflPastBayesAss.txt >> BATest

sbatch -e BATest.e%j -o BATest.o%j -p shortq7 --mail-user eshilling2013@fau.edu --mail-type=ALL BATest
#LogL: -526874.47 % done: [0.00] % accepted: (0.36, 0.00, 0.38, 0.32, 0.76)

##now running for actual data
for i in {01..10}; do
echo '#!/bin/bash' > BayesAss$i.sh
echo BA3SNP -v -u -s $RANDOM -i 10000000 -b 2000000 -n 100 -m 0.32 -a 0.75 -f 0.002 -t -o seflPastBARun${i}Out.txt ../seflPastBayesAss.txt >> BayesAss$i.sh;
mkdir run$i;
mv BayesAss$i.sh run$i;
cd run$i;
sbatch -e BayesAss$i.e%j -o BayesAss$i.o%j -p longq7 --mem=100GB --exclusive --mail-user eshilling2013@fau.edu --mail-type=ALL BayesAss$i.sh
cd ..;
done
