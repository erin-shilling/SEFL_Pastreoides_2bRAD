##amova output
$call
ade4::amova(samples = xtab, distances = xdist, structures = xstruct)

$results
                           Df    Sum Sq  Mean Sq
Between pop                 4  16529.28 4132.320
Between samples Within pop 31  91026.08 2936.325
Within samples             36 114965.00 3193.472
Total                      71 222520.36 3134.090

$componentsofcovariance
                                            Sigma          %
Variations  Between pop                  85.93975   2.727520
Variations  Between samples Within pop -128.57352  -4.080613
Variations  Within samples             3193.47222 101.353093
Total variations                       3150.83846 100.000000

$statphi
                          Phi
Phi-samples-total -0.01353093
Phi-samples-pop   -0.04195033
Phi-pop-total      0.02727520

##significant names output
[1] "Variations within samples"  "Variations between samples" "Variations between pop"

##signif obs output
[1] 3193.47222 -128.57352   85.93975

##p-values output
[1] 0.66 0.88 0.01

PCoA with IBS

pastMa = as.matrix(read.table("pastNoClones.ibsMat"))
pastMds = cmdscale(pastMa, eig = TRUE, x.ret = TRUE)

# Determine percent variation captured on each axis
# Calculate the eigenvalues so later we can figure out % variation shown on each Principal Coordinate

pastPcoaVar = round(pastMds$eig/sum(pastMds$eig)*100, 1)
head(pastPcoaVar)
## [1] 8.7 7.0 6.3 4.3 3.9 3.7
# Format data to plot
pastPcoaValues = pastMds$points
head(pastPcoaValues)
##          [,1]         [,2]
##[1,] -0.13117451 -0.105262017
##[2,] -0.12360879 -0.088852192
##[3,]  0.01292516  0.007190786
##[4,] -0.12945599 -0.082992978
##[5,]  0.01168498  0.013646703
##[6,] -0.13753297 -0.099806631
 # 2-column tab-delimited table of individual assignments to populations; must be in the same order as samples in the bam list or vcf file.
pastI2P = read.csv("poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tubeID, "pop" = region)

row.names(pastI2P) = pastI2P[,1]
pastPcoaValues=cbind(pastI2P, pastPcoaValues)
pastPcoaValues =as.data.frame(pastPcoaValues, sample = rownames(pastPcoaValues))
colnames(pastPcoaValues)[c(4,5)] = c("PCo1", "PCo2")
head(pastPcoaValues)

sample      pop       PCo1        PCo2
P002	P002	Jupiter	-0.13117451	-0.105262017
P003	P003	Jupiter	-0.12360879	-0.088852192
P004	P004	Jupiter	0.01292516	0.007190786
P006	P006	Jupiter	-0.12945599	-0.082992978
P008	P008	Jupiter	0.01168498	0.013646703
P009	P009	Jupiter	-0.13753297	-0.099806631

pastPCoA = merge(pastPcoaValues, aggregate(cbind(mean.x=PCo1,mean.y=PCo2)~pop, pastPcoaValues, mean), by="pop")

pastPCoA$pop = factor(pastPCoA$pop)
pastPCoA$pop = factor(pastPCoA$pop, levels(pastPCoA$pop)[c(4, 2, 5, 1, 3)])

# SNP PCoA biplot
flPal = paletteer_d("vapoRwave::jazzCup")[c(2:6)]

pastPcoaPlotA = ggplot(sintPCoA, aes(x = PCo1, y = PCo2, color = pop, fill = pop)) +
  geom_hline(yintercept = 0, color = "gray90", size = 0.5) +
  geom_vline(xintercept = 0, color = "gray90", size = 0.5) +
  stat_ellipse(data = pastPCoA, type = "t", geom = "polygon", alpha = 0.1) + #ellipse +
  geom_point(aes(x = PCo1, y = PCo2), size = 3, alpha = 0.3, show.legend = FALSE) + #individual's points indicated by circles
  geom_point(aes(x = mean.x, y = mean.y), size = 5, color = "black") + #population centroids indicated by triangles
  stat_ellipse(data = pastPCoA, type = "t", geom = "polygon", alpha = 0.1, fill = NA, size = 0.4) +
   annotate(geom = "text", x = 0.1, y = -0.15, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
  scale_fill_manual(values = flPal, name = "Region") +
  scale_color_manual(values = flPal, guide = NULL) +
  xlab(paste ("PCo 1 (", pastPcoaVar[1],"%)", sep = "")) + #Prints percent variation explained by first axis
  ylab(paste ("PCo 2 (", pastPcoaVar[2],"%)", sep = "")) + #Prints percent variation explained by second axis
  guides(shape = guide_legend(order = 2), linetype = guide_legend(override.aes = list(linetype = c(1,2), alpha = 1, color = "black", fill = NA), order = 3), fill = guide_legend(override.aes = list(shape = 22, size = 5, color = NA, alpha = NA), order = 1))+
  theme_bw()

pastPcoaPlot = pastPcoaPlotA +
  theme(axis.title.x = element_text(color = "black", size = 10),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.line.x = element_blank(),
        axis.title.y = element_text(color = "black", size = 10),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        legend.position = "right",
        panel.border = element_rect(color = "black", size = 1),
        panel.background = element_rect(fill = "white"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())

# pastPcoaPlot

ggsave("../figures/pcoaPlot.png", plot = pastPcoaPlot, height = 3.5, width = 7, units = "in", dpi = 300)
ggsave("../figures/pcoaPlot.pdf", plot = pastPcoaPlot, height = 3.5, width = 7, units = "in", dpi = 300)
ggsave("../figures/pcoaPlot.tiff", plot = pastPcoaPlot, height = 3.5, width = 7, units = "in", dpi = 300)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Pairwise Fst
pastVcf = read.vcfR("pastNoClones.bcf", verbose = FALSE)
# Converts the vcf file into a file format that poppr uses the "genlight" format
pastGenlightPopulation = vcfR2genlight(pastVcf, n.cores = 1)
locNames(pastGenlightPopulation) = paste(pastVcf@fix[,1],pastVcf@fix[,2],sep="_")
# Reads in population data for each sample
popData = read.csv("poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "pop" = region)

strata(pastGenlightPopulation) = data.frame(popData)
setPop(pastGenlightPopulation) = ~pop

pastGenlightPopulation$pop = factor(pastGenlightPopulation$pop)

set.seed(694)
sefl.fst <- stamppFst(pastGenlightPopulation, nboots = 99, percent = 95, nclusters = 2) #99 permutations
sefl.fst$Fsts

Jupiter West Palm Beach Boynton Beach St. Lucie Reef Pompano/LBTS
Jupiter                 NA              NA            NA             NA           NA
West Palm Beach 0.02039765              NA            NA             NA           NA
Boynton Beach   0.01265314     0.002712526            NA             NA           NA
St. Lucie Reef  0.03927415    -0.003273737    0.01232193             NA           NA
Pompano/LBTS    0.06841166     0.047436077    0.04013369     0.03030518           NA

> sefl.fst$Pvalues
                Jupiter West Palm Beach Boynton Beach St. Lucie Reef Pompano/LBTS
Jupiter              NA              NA            NA             NA           NA
West Palm Beach       0              NA            NA             NA           NA
Boynton Beach         0        0.000000            NA             NA           NA
St. Lucie Reef        0        0.989899             0             NA           NA
Pompano/LBTS          0        0.000000             0              0           NA

# reads in fst matrix
snpFstMa <- as.matrix(sefl.fst$Fsts)
upperTriangle(snpFstMa, byrow = TRUE) <- lowerTriangle(snpFstMa)
snpFstMa[upper.tri(snpFstMa)] <- NA
snpFstMa <- as.data.frame(snpFstMa)

snpFstMa$Pop = factor(row.names(snpFstMa)

snpQMa <- as.matrix(sefl.fst$Pvalues)
upperTriangle(snpQMa, byrow=TRUE) <- lowerTriangle(snpQMa)
snpQMa <- snpQMa[,pop.order] %>%
  .[pop.order,]
snpQMa[upper.tri(snpQMa)] <- NA
snpQMa <- as.data.frame(snpQMa)
snpQMa$Pop = factor(row.names(snpQMa), levels = unique(pop.order))

snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = FALSE)
snpFst$Fst = round(snpFst$Fst, 3)
snpFst = snpFst %>% mutate(Fst = replace(Fst, Fst < 0, 0))

snpQ = melt(snpQMa, id.vars = "Pop", value.name = "Pval", variable.name = "Pop2", na.rm = FALSE)
# snpQ = snpQ[snpQ$Pop != snpQ$Pop2,]
snpQ$Qval = p.adjust(snpQ$Pval, method = "BH")

snpFst$region = snpFst$Pop
snpFst$region = factor(gsub("\\n.*", "", snpFst$region))
snpFst$region = factor(snpFst$region, levels = levels(snpFst$region)[c(4, 1, 3, 2)])

snpFst$region2 = snpFst$Pop2
snpFst$region2 = factor(gsub("\\n.*", "", snpFst$region2))
snpFst$region2 = factor(snpFst$region2, levels = levels(snpFst$region2)[c(4, 1, 3, 2)])

snpFst$Fst = sprintf('%.3f', snpFst$Fst)
snpFst$Fst = factor(gsub("\\NA", NA, snpFst$Fst))
snpFst$Fst = factor(gsub("\\.000", "", snpFst$Fst))
snpFst$Fst = factor(gsub("\\-", "", snpFst$Fst))

snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = as.numeric(as.character(Fst))))+
  geom_tile(color = "white")+
  geom_segment(data = snpFst, aes(x = 0.475, xend = -0.62, y = Pop, yend = Pop, color = region), size = 17.5) +
  geom_segment(data = snpFst, aes(x = Pop2, xend = Pop2, y = 0.425, yend = -0.6, color = region2), size = 50.5) +
  scale_color_manual(values = flPal, guide = NULL) +
  scale_fill_gradient(low = "white", high = "#BF5E49", limit = c(0, 0.03), space = "Lab", name = expression(paste(italic("F")[ST])), na.value = "white",  guide = "colourbar")+
  geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5), fontface = ifelse (snpQ$Qval < 0.05, "bold", "plain")) +
  guides(fill = guide_colorbar(barwidth = 12, barheight = 1, title.position = "top", title.hjust = 0.5)) +
  scale_y_discrete(position = "left") +
  scale_x_discrete(limits = rev(levels(snpFst$Pop))[c(1:8)]) +
  coord_cartesian(xlim = c(1, 8), ylim = c(1, 8), clip = "off") +
  theme_minimal()

snpHeatmap = snpHeatmapA + theme(
  axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "gray90"),
  axis.text.y = element_text(size = 16, color = "gray90"),
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  panel.grid.major = element_blank(),
  panel.border = element_blank(),
  axis.ticks = element_blank(),
  legend.position = c(0.5, 0.9),
  legend.direction = "horizontal",
  legend.title = element_text(size = 16),
  legend.text = element_text(size = 14),
  plot.title = element_text(size = 16)
)

# snpHeatmap

ggsave("../figures/fstHeatMap.png", plot = snpHeatmap, width = 36, height = 13, units = "cm", dpi = 300)
ggsave("../figures/fstHeatMap.eps", plot = snpHeatmap, width = 36, height = 13, units = "cm", dpi = 300)
