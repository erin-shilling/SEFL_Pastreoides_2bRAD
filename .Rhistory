geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Region") +
ylab("Heterozygosity") +
ggtitle("SNPs") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme
inbreedingPlot = ggplot(data = het, aes(x = Region, y = inbreed, fill = Region)) +
geom_point(aes(color = Region),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Region") +
ylab("Inbreeding coefficient") +
ggtitle("Inbreeding") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme
relatePlot = ggplot(data = pastRelate, aes(x = Region, y = relate, fill = Region)) +
geom_point(aes(color = Region),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Region") +
ylab("Relatedness") +
ggtitle("Relatedness") +
scale_fill_manual(values = flPal) +
scale_color_manual(values = flPal) +
theme_bw() +
hetTheme
hetPlots = ((hetPlotAll | hetPlotSnps) / (inbreedingPlot | relatePlot)) +
plot_annotation(tag_levels = 'A') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right")
hetPlots
ggsave("figures/heterozygosityPlot.png", plot = hetPlots, width = 22, height = 16, units = "cm", dpi = 300)
ggsave("figures/heterozygosityPlot.pdf", plot = hetPlots, width = 22, height = 16, units = "cm", dpi = 300)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
# setup rmarkdown environment first
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = 'left')
# packages: tidyverse,
bayescan = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/seflpast.baye_fst.txt",header=T) %>% mutate(loc = rownames(.), out.05 = ifelse(qval < 0.05, 1, 0), out.1 = ifelse(qval < 0.1, 1, 0))
bayescan[bayescan[, 3]<=0.0001, 3] = 0.0001
bayeScEnv = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/seflpast.bayeS_fst.txt", header=T) %>% filter(qval_g < 0.05) %>% mutate(loc = rownames(.), depthOut = 1) %>% select(loc, depthOut)
bayescan = bayescan %>% left_join(bayeScEnv)
bayescan$depthOut = bayescan$depthOut %>% replace_na(0)
sum(bayescan$out.05)
sum(bayescan$out.1)
sum(bayescan$depthOut)
for(i in 1:nrow(bayescan)){
if(bayescan$depthOut[i] == 1){
bayescan$out.05[i] = 2
}
}
bayescanPlotA = ggplot(data = bayescan, aes(x = log10(qval), y = fst, color = as.factor(out.05), alpha = as.factor(out.05))) +
geom_point(size = 1) +
geom_vline(xintercept = log10(0.05), linetype = 2, color = "purple") +
xlab(expression(log[10]*"("*italic("q")*"-value)")) +
ylab(expression(italic("F")[ST])) +
scale_x_reverse() +
scale_color_manual(values = c("grey45", "purple", "pink")) +
scale_alpha_manual(values = c(0.25, 0.25, 0.5)) +
theme_bw()
bayescanPlot = bayescanPlotA +
theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_text(color = "black", size = 12),
axis.ticks.x = element_line(color = "black"),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 10),
axis.ticks.y = element_line(color = "black"),
legend.position = "none",
legend.key.size = unit(0.3, 'cm'),
panel.border = element_rect(color = "black"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
bayescanPlot
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/outliers.pdf", plot = bayescanPlot, width = 14, height = 8, units = "cm", dpi = 300)
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/outliers.png", plot = bayescanPlot, width = 14, height = 8, units = "cm", dpi = 300)
ReplaceLowerOrUpperTriangle = function(m, triangle.to.replace) {
if (nrow(m) != ncol(m))
stop("Supplied matrix must be square.")
if (tolower(triangle.to.replace) == "lower")
tri = lower.tri(m)
else if (tolower(triangle.to.replace) == "upper")
tri = upper.tri(m)
else
stop("triangle.to.replace must be set to 'lower' or 'upper'.")
m[tri] = t(m)[tri]
return(m)
}
# If triangle.to.replace="lower", replaces the lower triangle of a square matrix with its upper triangle.
# If triangle.to.replace="upper", replaces the upper triangle of a square matrix with its lower triangle.
GeoDistanceInMetresMatrix = function(df.geopoints) {
# Returns a matrix (M) of distances between geographic points. M[i,j] = M[j,i] = Distance between (df.geopoints$lat[i], df.geopoints$lon[i]) and (df.geopoints$lat[j], df.geopoints$lon[j]). The row and column names are given by df.geopoints$name.
GeoDistanceInMetres = function(g1, g2) {
# Returns a vector of distances. (But if g1$index > g2$index, returns zero.) The 1st value in the returned vector is the distance between g1[[1]] and g2[[1]]. The 2nd value in the returned vector is the distance between g1[[2]] and g2[[2]]. Etc. Each g1[[x]] or g2[[x]] must be a list with named elements "index", "lat" and "lon". E.g. g1 = list(list("index"=1, "lat"=12.1, "lon"=10.1), list("index"=3, "lat"=12.1, "lon"=13.2))
DistM = function(g1, g2) {
require("Imap")
return(ifelse(
g1$index > g2$index,
0,
gdist(lat.1 = g1$lat, lon.1 = g1$lon, lat.2 = g2$lat, lon.2 = g2$lon, units = "m")))
}
return(mapply(DistM, g1, g2))
}
n.geopoints = nrow(df.geopoints)
# The index column is used to ensure we only do calculations for the upper triangle of points
df.geopoints$index = 1:n.geopoints
# Create a list of lists
list.geopoints = by(df.geopoints[, c("index", "lat", "lon")], 1:n.geopoints, function(x) {
return(list(x))
})
# Get a matrix of distances (in metres)
mat.distances = ReplaceLowerOrUpperTriangle(outer(list.geopoints, list.geopoints, GeoDistanceInMetres), "lower")
# Set the row and column names
rownames(mat.distances) = df.geopoints$name
colnames(mat.distances) = df.geopoints$name
return(mat.distances)}
#packages: ade4
pastIBS = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/pastNoClones.ibsMat")%>% as.matrix() %>% as.dist(diag = FALSE)
coords = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select(name = tube_id, lat = site_lat, lon = site_long)
pastGeo = as.dist(GeoDistanceInMetresMatrix(coords)/1000, diag = FALSE)
set.seed(694)
seflPastMantelDist = mantel.randtest(pastIBS, pastGeo, nrepet = 9999)
library(ade4)
seflPastMantelDist = mantel.randtest(pastIBS, pastGeo, nrepet = 9999)
seflPastMantelDist
mantelObsDist = round(seflPastMantelDist$obs, 3)
mantelPDist = seflPastMantelDist$pvalue
pastIBSdist =  melt(as.matrix(pastIBS), varnames = c("row", "col"), value.name = "ibs")
libary(reshape2)
library(reshape2)
pastIBSdist =  melt(as.matrix(pastIBS), varnames = c("row", "col"), value.name = "ibs")
pastIBSdist = pastIBSdist[pastIBSdist$row != pastIBSdist$col,]
pastDist = melt(as.matrix(pastGeo), varnames = c("row", "col"), value.name = "distance")
pastDist = pastDist[pastDist$row != pastDist$col,]
snpMantelDistF = data.frame(cbind(pastIBSdist$ibs, pastDist$distance))
colnames(snpMantelDistF) = c("ibs", "distance")
pastIBSdistMantelA = ggplot(data = snpMantelDistF, aes(x = distance, y = ibs)) +
scale_fill_gradientn(colors = paletteer_d("wesanderson::Zissou1")) +
geom_point(shape = 21, fill = "gray40", alpha = 0.25, size = 0.5) +
stat_density_2d(aes(fill = stat(density)), n = 300, contour = FALSE, geom = "raster", alpha = 0.75) +
geom_smooth(method = lm, col = "black", fill = "gray40", fullrange = TRUE, size = 0.5) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
annotate(geom = "text", x = 35, y = 0.24, label = bquote(~italic(r)~" = "~.(mantelObsDist)*", "~italic(p)~" = "~.(mantelPDist)), size = 3) +
labs(x = expression(paste(Delta," distance (km)")), y = "Genetic distance (1 - IBS)") +
theme_bw()
library(paletteer)
pastIBSdistMantelA = ggplot(data = snpMantelDistF, aes(x = distance, y = ibs)) +
scale_fill_gradientn(colors = paletteer_d("wesanderson::Zissou1")) +
geom_point(shape = 21, fill = "gray40", alpha = 0.25, size = 0.5) +
stat_density_2d(aes(fill = stat(density)), n = 300, contour = FALSE, geom = "raster", alpha = 0.75) +
geom_smooth(method = lm, col = "black", fill = "gray40", fullrange = TRUE, size = 0.5) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
annotate(geom = "text", x = 35, y = 0.24, label = bquote(~italic(r)~" = "~.(mantelObsDist)*", "~italic(p)~" = "~.(mantelPDist)), size = 3) +
labs(x = expression(paste(Delta," distance (km)")), y = "Genetic distance (1 - IBS)") +
theme_bw()
pastIBSdistMantel = pastIBSdistMantelA + theme(
axis.title.x = element_text(size = 12, color = "black"),
axis.text.x = element_text(size = 12, color = "black"),
axis.ticks.x = element_line(color = "black"),
axis.line.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.ticks.y = element_line(color = "black"),
axis.line.y = element_blank(),
panel.border = element_rect(size = 1.2, color = "black"),
plot.margin = margin(0.2,0.5,0.1,0.1, unit = "cm"),
legend.position = "none")
pastIBSdistMantel
knitr::opts_chunk$set(echo = TRUE)
# setup rmarkdown environment first
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = 'left')
pastIBS = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/pastNoClones.ibsMat")%>% as.matrix() %>% as.dist(diag = FALSE)
library(tidyverse)
pastIBS = read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/pastNoClones.ibsMat")%>% as.matrix() %>% as.dist(diag = FALSE)
pastDepths = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select(name = tube_id, collection_depth_m) %>% dist(method = "maximum")
set.seed(694)
seflpastMantel = mantel.randtest(pastIBS, pastDepths, nrepet = 9999)
library(ade4)
seflpastMantel = mantel.randtest(pastIBS, pastDepths, nrepet = 9999)
seflpastMantel
mantelObs = round(seflpastMantel$obs, 3)
mantelP = seflpastMantel$pvalue
pastIBSdist =  melt(as.matrix(pastIBS), varnames = c("row", "col"), value.name = "ibs")
library(reshape2)
pastIBSdist =  melt(as.matrix(pastIBS), varnames = c("row", "col"), value.name = "ibs")
pastIBSdist = pastIBSdist[pastIBSdist$row != pastIBSdist$col,]
pastDepth = melt(as.matrix(pastDepths), varnames = c("row", "col"), value.name = "depth")
pastDepth = pastDepth[pastDepth$row != pastDepth$col,]
snpMantelDF = data.frame(cbind(pastIBSdist$ibs, pastDepth$depth))
colnames(snpMantelDF) = c("ibs", "depth")
library(paletteer)
pastIBSdepthMantelA = ggplot(data = snpMantelDF, aes(x = depth, y = ibs)) + scale_fill_gradientn(colors = paletteer_d("wesanderson::Zissou1")) +
geom_point(shape = 21, fill = "gray40", alpha = 0.25, size = 0.5) +
stat_density_2d(aes(fill = stat(density)), n = 300, contour = FALSE, geom = "raster", alpha = 0.75) +
geom_smooth(method = lm, col = "black", fill = "gray40", fullrange = TRUE, size = 0.5) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
annotate(geom = "text", x = 10, y = 0.24, label = bquote(~italic(r)~" = "~.(mantelObs)*", "~italic(p)~" = "~.(mantelP)), size = 3) +
labs(x = expression(paste(Delta," depth (m)")), y = "Genetic distance (1 - IBS)") +
theme_bw()
pastIBSdepthMantel = pastIBSdepthMantelA + theme(
axis.title.x = element_text(size = 12, color = "black"),
axis.text.x = element_text(size = 12, color = "black"),
axis.ticks.x = element_line(color = "black"),
axis.line.x = element_blank(),
axis.title.y = element_text(size = 12, color = "black"),
axis.text.y = element_text(size = 12, color = "black"),
axis.ticks.y = element_line(color = "black"),
axis.line.y = element_blank(),
panel.border = element_rect(size = 1.2, color = "black"),
plot.margin = margin(0.2,0.5,0.1,0.1, unit = "cm"),
legend.position = "none")
pastIBSdepthMantel
library(reshape2)
library(paletteer)
library(tidyverse)
library(reshape2)
knitr::opts_chunk$set(echo = TRUE)
# setup rmarkdown environment first
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = 'left')
kColPal3 = paletteer_c("viridis::viridis", n = 3)
kColPal7 = paletteer_c("viridis::viridis", n = 7)
admixpops = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Region" = region)
clumpp3 = read.table("data_files/pastClumppK3", header = FALSE)
clumpp7 = read.table("data_files/pastClumppK7", header = FALSE)
clumpp3$V1 = admixpops$sample
clumpp7$V1 = admixpops$sample
seflPastAdmix = admixpops %>% left_join(clumpp3[,c(1,6:8)], by = c("sample" = "V1")) %>%
left_join(clumpp7[,c(1, 6:12)], by = c("sample" = "V1")) %>% rename("cluster3.1" = "V6.x", "cluster3.2" = "V7.x", "cluster3.3" = "V8.x","cluster7.1" = "V6.y", "cluster7.2" = "V7.y", "cluster7.3" = "V8.y", "cluster7.4" = "V9", "cluster7.5" = "V10", "cluster7.6" = "V11", "cluster7.7" = "V12")
seflPastAdmix$Region = factor(seflPastAdmix$Region)
seflPastAdmix$Region = factor(seflPastAdmix$Region, levels(seflPastAdmix$Region)[c(4, 2, 5, 1, 3)])
levels(seflPastAdmix$Region)[1] = "St. Lucie"
seflPastAdmix = arrange(seflPastAdmix, Region, -cluster3.1)
popCounts = seflPastAdmix %>% group_by(Region) %>% summarize(n = n())
popCounts
popCountList = reshape2::melt(lapply(popCounts$n,function(x){c(1:x)}))
seflPastAdmix$ord = popCountList$value
seflPastAdmixMelt = melt(seflPastAdmix, id.vars=c("sample", "Region", "ord"), variable.name="Ancestry", value.name="Fraction")
seflPastAdmixMelt$Ancestry = factor(seflPastAdmixMelt$Ancestry)
seflPastAdmixMelt$Ancestry = factor(seflPastAdmixMelt$Ancestry, levels = rev(levels(seflPastAdmixMelt$Ancestry)))
popAnno = data.frame(x1 = c(0.3, 0.3, 0.3, 0.3, 0.3), x2 = c(3.7, 10.7, 7.7, 10.7, 6.7),
y1 = -0.12, y2 = -0.12, sample = NA, Ancestry = NA, ord  = NA, Fraction = NA,
Region= c("St. Lucie", "Jupiter", "West Palm Beach", "Boynton Beach", "Pompano/LBTS"))
popAnno$Region = factor(popAnno$Region)
popAnno$Region = factor(popAnno$Region, levels = levels(popAnno$Region)[c(4, 2, 5, 1, 3)])
admixTheme = theme_bw()+
theme(plot.title = element_text(hjust = 0, size = 10),
panel.grid = element_blank(),
panel.background = element_rect(fill = "gray25", colour = "gray25"),
panel.border = element_rect(fill = NA, color = "black", size = 1, linetype = "solid"),
panel.spacing.x = grid:::unit(0.05, "lines"),
panel.spacing.y = grid:::unit(0.05, "lines"),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title = element_blank(),
strip.background.x = element_blank(),
strip.background.y = element_blank(),
strip.text = element_text(size = 8),
strip.text.y.left = element_text(size = 10, angle = 90),
strip.text.x.bottom = element_text(vjust = -.1, color = "black"),
legend.key = element_blank(),
legend.position = "none",
legend.title = element_text(size = 8))
admixPlotK3A = ggplot(data = subset(seflPastAdmixMelt, subset = seflPastAdmixMelt$Ancestry %in% c("cluster3.1", "cluster3.2", "cluster3.3")), aes(x = ord, y = Fraction, fill = Ancestry, order = sample)) +
geom_segment(data = popAnno, aes(x = x1, xend = x2, y = y1, yend = y2, color = Region), size = 7) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25", size = 0.2) +
facet_grid(.~ Region, scales = "free", switch = "both", space = "free") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0.001, 0.001)) +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = flPal) +
ggtitle(expression(paste(italic("K")," = 3", sep =""))) +
coord_cartesian(ylim = c(-0.01, 1.01), clip = "off")
flPal = paletteer_d("rcartocolor::Sunset")[c(7, 6, 4, 3, 1)]
admixTheme = theme_bw()+
theme(plot.title = element_text(hjust = 0, size = 10),
panel.grid = element_blank(),
panel.background = element_rect(fill = "gray25", colour = "gray25"),
panel.border = element_rect(fill = NA, color = "black", size = 1, linetype = "solid"),
panel.spacing.x = grid:::unit(0.05, "lines"),
panel.spacing.y = grid:::unit(0.05, "lines"),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title = element_blank(),
strip.background.x = element_blank(),
strip.background.y = element_blank(),
strip.text = element_text(size = 8),
strip.text.y.left = element_text(size = 10, angle = 90),
strip.text.x.bottom = element_text(vjust = -.1, color = "black"),
legend.key = element_blank(),
legend.position = "none",
legend.title = element_text(size = 8))
admixPlotK3A = ggplot(data = subset(seflPastAdmixMelt, subset = seflPastAdmixMelt$Ancestry %in% c("cluster3.1", "cluster3.2", "cluster3.3")), aes(x = ord, y = Fraction, fill = Ancestry, order = sample)) +
geom_segment(data = popAnno, aes(x = x1, xend = x2, y = y1, yend = y2, color = Region), size = 7) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25", size = 0.2) +
facet_grid(.~ Region, scales = "free", switch = "both", space = "free") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0.001, 0.001)) +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = flPal) +
ggtitle(expression(paste(italic("K")," = 3", sep =""))) +
coord_cartesian(ylim = c(-0.01, 1.01), clip = "off")
admixPlotK3 = admixPlotK3A + admixTheme
admixPlotK7A = ggplot(data = subset(seflPastAdmixMelt, subset = !(seflPastAdmixMelt$Ancestry %in% c("cluster3.1", "cluster3.2", "cluster3.3"))), aes(x = ord, y = Fraction, fill = Ancestry, order = sample)) +
geom_segment(data = popAnno, aes(x = x1, xend = x2, y = y1, yend = y2, color = Region), size = 7) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25", size = 0.2) +
facet_grid(.~ Region, scales = "free", switch = "both", space = "free") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0.001, 0.001)) +
scale_fill_manual(values = kColPal7) +
scale_color_manual(values = flPal) +
ggtitle(expression(paste(italic("K")," = 7", sep =""))) +
coord_cartesian(ylim = c(-.01, 1.01), clip = "off")
admixPlotK7 = admixPlotK7A + admixTheme
admixPlot = (admixPlotK3 / admixPlotK7)
knitr::opts_chunk$set(echo = TRUE)
# setup rmarkdown environment first
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = 'left')
popDataClones = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData.csv") [-c(27, 28, 46, 47, 79, 80),] %>% select("sample" = tube_id, "pop" = region)
library(tidyverse)
popDataClones = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData.csv") [-c(27, 28, 46, 47, 79, 80),] %>% select("sample" = tube_id, "pop" = region)
#treat populations as a factor & order them North-->South
popDataClones$pop = factor(popDataClones$pop)
popDataClones$pop = factor(popDataClones$pop, levels = levels(popDataClones$pop)[c(4, 2, 5, 1, 3)])
zoox = read.delim("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/zooxReads_withclones_techrepsrem", header = FALSE, check.names = FALSE)
head(zoox)
zoox$V2[is.na(zoox$V2)] <- as.character(zoox$V1[is.na(zoox$V2)])
zoox$V1 = gsub("P.*", "chr", zoox$V1)
zoox$V2 = gsub(".trim.*", "", zoox$V2)
zoox = zoox %>% filter(zoox$V1 != "*")
zooxLst = split(zoox$V2, as.integer(gl(length(zoox$V2), 20, length(zoox$V2))))
zooxMaps = NULL
for(i in zooxLst){
zooxMaps = rbind(zooxMaps, data.frame(t(i)))
}
colnames(zooxMaps) = c("sample", zoox$V1[c(2:20)])
for(i in c(2:20)){
zooxMaps[,i] = as.numeric(zooxMaps[,i])
}
str(zooxMaps)
zooxMaps$Symbiodinium = rowSums(zooxMaps[2:6])
zooxMaps$Breviolum = rowSums(zooxMaps[7:10])
zooxMaps$Cladocopium = rowSums(zooxMaps[11:16])
zooxMaps$Durusdinium = rowSums(zooxMaps[17:20])
zooxMaps = zooxMaps[,c(1, 21:24)]
zooxProp = zooxMaps
zooxProp$sum = apply(zooxProp[, c(2:length(zooxProp[1,]))], 1, function(x) {
sum(x, na.rm = T)
})
zooxProp = cbind(zooxProp$sample, (zooxProp[, c(2:(ncol(zooxProp)-1))]
/ zooxProp$sum))
colnames(zooxProp)[1] = "sample"
head(zooxProp)
apply(zooxProp[, c(2:(ncol(zooxProp)))], 1, function(x) {
sum(x, na.rm = T)
})
dfZoox = popDataClones %>% left_join(zooxProp)
dfZoox$pop = as.factor(dfZoox$pop)
dfZoox = dfZoox[order(dfZoox$pop),]
sampleCounts = plyr::count(dfZoox, c('pop'))
meltedList = reshape2::melt(lapply(sampleCounts$freq,function(x){c(1:x)}))
dfZoox$barPlotOrder = meltedList$value
dfZoox = dfZoox[c(1,ncol(dfZoox),2:(ncol(dfZoox)-1))]
zDat = melt(dfZoox, id.vars = c("sample", "pop", "barPlotOrder"), variable.name = "Symbiont", value.name = "Fraction")
library(reshape2)
dfZoox = dfZoox[order(dfZoox$pop),]
sampleCounts = plyr::count(dfZoox, c('pop'))
meltedList = reshape2::melt(lapply(sampleCounts$freq,function(x){c(1:x)}))
dfZoox$barPlotOrder = meltedList$value
dfZoox = dfZoox[c(1,ncol(dfZoox),2:(ncol(dfZoox)-1))]
zDat = melt(dfZoox, id.vars = c("sample", "pop", "barPlotOrder"), variable.name = "Symbiont", value.name = "Fraction")
colPalZoox = brewer.pal(4, "BrBG")
library(paletteer)
colPalZoox = brewer.pal(4, "BrBG")
library(RColorBrewer)
colPalZoox = brewer.pal(4, "BrBG")
names(colPalZoox) = levels(zDat$Symbiont)
colPalZoox = c("#247EA3", "#FFBF46", "#6A9FA1", "Purple3")
flPal = paletteer_d("rcartocolor::Sunset")[c(7, 6, 4, 3, 1)]
popAnno = data.frame(x1 = c(0.5, 0.5, 0.5, 0.5, 0.5), x2 = c(30.5, 15.5, 13.5, 14.5, 15.5),
y1 = -0.065, y2 = -0.065, pop = c("St. Lucie Reef", "Jupiter", "West Palm Beach", "Boynton Beach", "Pompano/LBTS"))
popAnno$pop = factor(popAnno$pop)
popAnno$pop = factor(popAnno$pop, levels = levels(popAnno$pop)[c(4, 2, 5, 1, 3)])
dfZoox = zDat %>% left_join(popAnno, by = "pop")
zooxSNPA = ggplot(data = dfZoox, aes(x = barPlotOrder, y = Fraction, fill = Symbiont, order = barPlotOrder)) +
geom_bar(stat = "identity", position = "stack", colour = "grey25", width = 1, size = 0.2) +
xlab("Population") +
scale_x_discrete(expand = c(0.001, 0.001)) +
scale_y_continuous(expand = c(-.001, -0.001)) +
scale_color_manual(values = flPal) +
geom_segment(aes(x = x1, xend = x2, y = y1, yend = y2, color = pop), size = 7) +
scale_fill_manual(values = colPalZoox, name = "Symbiodiniaceae genus") +
coord_cartesian(ylim = c(-.01,1.01), clip = "off") +
facet_grid(~ pop, drop = TRUE, space = "free", scales = "free", switch = "both") +
guides(color = "none") +
theme_bw()
zooxSNP = zooxSNPA + theme(plot.title = element_text(),
panel.grid = element_blank(),
panel.background = element_rect(fill = "gray25", colour = "grey25"),
panel.border = element_rect(fill = NA, color = "black", size = 1, linetype = "solid"),
panel.spacing.x = grid:::unit(0.05, "lines"),
panel.spacing.y = grid:::unit(0.05, "lines"),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title = element_blank(),
strip.background.x = element_blank(),
strip.background.y = element_blank(),
strip.text = element_text(size = 10),
strip.text.y.left = element_text(size = 10, angle = 90),
strip.text.x.bottom = element_text(vjust = -.05, color = "black"),
legend.key.size = unit(0.75, "line"),
legend.title = element_text(size = 10),
legend.text = element_text(size = 8),
legend.key = element_blank(),
legend.position = "bottom")
ReplaceLowerOrUpperTriangle = function(m, triangle.to.replace) {
if (nrow(m) != ncol(m))
stop("Supplied matrix must be square.")
if (tolower(triangle.to.replace) == "lower")
tri = lower.tri(m)
else if (tolower(triangle.to.replace) == "upper")
tri = upper.tri(m)
else
stop("triangle.to.replace must be set to 'lower' or 'upper'.")
m[tri] = t(m)[tri]
return(m)
}
# If triangle.to.replace="lower", replaces the lower triangle of a square matrix with its upper triangle.
# If triangle.to.replace="upper", replaces the upper triangle of a square matrix with its lower triangle.
GeoDistanceInMetresMatrix = function(df.geopoints) {
# Returns a matrix (M) of distances between geographic points. M[i,j] = M[j,i] = Distance between (df.geopoints$lat[i], df.geopoints$lon[i]) and (df.geopoints$lat[j], df.geopoints$lon[j]). The row and column names are given by df.geopoints$name.
GeoDistanceInMetres = function(g1, g2) {
# Returns a vector of distances. (But if g1$index > g2$index, returns zero.) The 1st value in the returned vector is the distance between g1[[1]] and g2[[1]]. The 2nd value in the returned vector is the distance between g1[[2]] and g2[[2]]. Etc. Each g1[[x]] or g2[[x]] must be a list with named elements "index", "lat" and "lon". E.g. g1 = list(list("index"=1, "lat"=12.1, "lon"=10.1), list("index"=3, "lat"=12.1, "lon"=13.2))
DistM = function(g1, g2) {
require("Imap")
return(ifelse(
g1$index > g2$index,
0,
gdist(lat.1 = g1$lat, lon.1 = g1$lon, lat.2 = g2$lat, lon.2 = g2$lon, units = "m")))
}
return(mapply(DistM, g1, g2))
}
n.geopoints = nrow(df.geopoints)
# The index column is used to ensure we only do calculations for the upper triangle of points
df.geopoints$index = 1:n.geopoints
# Create a list of lists
list.geopoints = by(df.geopoints[, c("index", "lat", "lon")], 1:n.geopoints, function(x) {
return(list(x))
})
# Get a matrix of distances (in metres)
mat.distances = ReplaceLowerOrUpperTriangle(outer(list.geopoints, list.geopoints, GeoDistanceInMetres), "lower")
# Set the row and column names
rownames(mat.distances) = df.geopoints$name
colnames(mat.distances) = df.geopoints$name
return(mat.distances)}
knitr::opts_chunk$set(echo = TRUE)
# setup rmarkdown environment first
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = 'left')
ReplaceLowerOrUpperTriangle = function(m, triangle.to.replace) {
if (nrow(m) != ncol(m))
stop("Supplied matrix must be square.")
if (tolower(triangle.to.replace) == "lower")
tri = lower.tri(m)
else if (tolower(triangle.to.replace) == "upper")
tri = upper.tri(m)
else
stop("triangle.to.replace must be set to 'lower' or 'upper'.")
m[tri] = t(m)[tri]
return(m)
}
# If triangle.to.replace="lower", replaces the lower triangle of a square matrix with its upper triangle.
# If triangle.to.replace="upper", replaces the upper triangle of a square matrix with its lower triangle.
GeoDistanceInMetresMatrix = function(df.geopoints) {
# Returns a matrix (M) of distances between geographic points. M[i,j] = M[j,i] = Distance between (df.geopoints$lat[i], df.geopoints$lon[i]) and (df.geopoints$lat[j], df.geopoints$lon[j]). The row and column names are given by df.geopoints$name.
GeoDistanceInMetres = function(g1, g2) {
# Returns a vector of distances. (But if g1$index > g2$index, returns zero.) The 1st value in the returned vector is the distance between g1[[1]] and g2[[1]]. The 2nd value in the returned vector is the distance between g1[[2]] and g2[[2]]. Etc. Each g1[[x]] or g2[[x]] must be a list with named elements "index", "lat" and "lon". E.g. g1 = list(list("index"=1, "lat"=12.1, "lon"=10.1), list("index"=3, "lat"=12.1, "lon"=13.2))
DistM = function(g1, g2) {
require("Imap")
return(ifelse(
g1$index > g2$index,
0,
gdist(lat.1 = g1$lat, lon.1 = g1$lon, lat.2 = g2$lat, lon.2 = g2$lon, units = "m")))
}
return(mapply(DistM, g1, g2))
}
n.geopoints = nrow(df.geopoints)
# The index column is used to ensure we only do calculations for the upper triangle of points
df.geopoints$index = 1:n.geopoints
# Create a list of lists
list.geopoints = by(df.geopoints[, c("index", "lat", "lon")], 1:n.geopoints, function(x) {
return(list(x))
})
# Get a matrix of distances (in metres)
mat.distances = ReplaceLowerOrUpperTriangle(outer(list.geopoints, list.geopoints, GeoDistanceInMetres), "lower")
# Set the row and column names
rownames(mat.distances) = df.geopoints$name
colnames(mat.distances) = df.geopoints$name
return(mat.distances)}
