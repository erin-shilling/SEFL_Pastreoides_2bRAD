axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.22, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
pastDbrdaPlot1 = pastDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.27, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
pastDbrdaPlot1 = pastDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/DbrdaPlot.png", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
#add bg = "transparent" to export with no background color
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/genome_mapped/figures/DbrdaPlot.tiff", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/DbrdaPlot.png", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/DbrdaPlot.tiff", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.25, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
pastDbrdaPlot1 = pastDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/DbrdaPlot.png", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
#add bg = "transparent" to export with no background color
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/DbrdaPlot.tiff", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 300)
??varpart
knitr::opts_chunk$set(echo = TRUE)
# setup rmarkdown environment first
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = 'left')
options(timeout=600)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# packages: paletteer, tidyverse, reshape2
#kColPal3 = paletteer_d("LaCroixColoR::MurePepino")[c(3,4,6)]
kColPal3 = c("#AFDE62", "mediumpurple3", "#FF8C8D")
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis", "ropensci/rnaturalearthhires")
pacman::p_load("cowplot", "ggrepel", "ggspatial", "maps", "paletteer", "patchwork", "rgdal", "rnaturalearth", "sf", "tidyverse", "reshape2", "MCMC.OTU", "pairwiseAdonis", "RColorBrewer", "Redmonder", "flextable", "lubridate", "officer", "adegenet", "dendextend", "gdata", "ggdendro", "hierfstat", "Imap", "kableExtra", "poppr", "StAMPP", "vcfR", "vegan", "boa", "measurements", "magick", "rgeos", "magrittr", "ggplot2", "rstatix", "ggpubr", "Hmisc")
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
admixpops = read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Region" = region)
##
clumpp3 = read.table("data_files/pastClumpK3.output", header = FALSE)
clumpp3$V1 = admixpops$sample
seflPastAdmix = admixpops %>% left_join(clumpp3[,c(1,6:8)], by = c("sample" = "V1")) %>% rename("cluster3.1" = "V6", "cluster3.2" = "V7", "cluster3.3" = "V8")
seflPastAdmix$Region = factor(seflPastAdmix$Region)
seflPastAdmix$Region = factor(seflPastAdmix$Region, levels(seflPastAdmix$Region)[c(4, 2, 5, 1, 3)])
levels(seflPastAdmix$Region)[1] = "St. Lucie"
levels(seflPastAdmix$Region)[5] = "Ft. Lauderdale"
seflPastAdmix = arrange(seflPastAdmix, Region, -cluster3.1)
cloneCounts = c("8","20","6","","","3","","","","","","5","","","","2","","","","","5","","","","","","","","","","","","3","8","","")
seflPastAdmix$clones = cloneCounts
popCounts = seflPastAdmix %>% group_by(Region) %>% dplyr::summarize(n = n())
popCounts
popCountList = reshape2::melt(lapply(popCounts$n,function(x){c(1:x)}))
seflPastAdmix$ord = popCountList$value
seflPastAdmixMelt = melt(seflPastAdmix, id.vars=c("sample", "Region", "ord", "clones"), variable.name="Ancestry", value.name="Fraction")
seflPastAdmixMelt$Ancestry = factor(seflPastAdmixMelt$Ancestry)
seflPastAdmixMelt$Ancestry = factor(seflPastAdmixMelt$Ancestry, levels = rev(levels(seflPastAdmixMelt$Ancestry)))
write_excel_csv(seflPastAdmixMelt, file= 'Samples in each K.csv')
#making segments that are color coded by population
#x2 is number of samples for each plot plus 0.7 to ordinate spacing of columns
popAnno = data.frame(x1 = c(0.3, 0.3, 0.3, 0.3, 0.3), x2 = c(3.7, 10.7, 7.7, 10.7, 6.7), y1 = -0.12, y2 = -0.12, sample = NA, Ancestry = NA, ord  = NA, Fraction = NA,Region= c("St. Lucie", "Jupiter", "West Palm Beach", "Boynton Beach", "Ft. Lauderdale"))
popAnno$Region = factor(popAnno$Region)
popAnno$Region = factor(popAnno$Region, levels = levels(popAnno$Region)[c(4, 3, 5, 1, 2)])
admixTheme = theme_bw()+
theme(plot.title = element_text(hjust = 0, size = 10),
panel.grid = element_blank(),
panel.background = element_rect(fill = "gray25", colour = "gray25"),
panel.border = element_rect(fill = NA, color = "black", size = 1, linetype = "solid"),
panel.spacing.x = grid:::unit(0.05, "lines"),
panel.spacing.y = grid:::unit(0.05, "lines"),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title = element_blank(),
strip.background.x = element_blank(),
strip.background.y = element_blank(),
strip.text = element_text(size = 8),
strip.text.y.left = element_text(size = 10, angle = 90),
strip.text.x.bottom = element_text(vjust = -.1, color = "black"),
legend.key = element_blank(),
legend.position = "none",
legend.title = element_text(size = 8))
admixPlotK3A = ggplot(data = subset(seflPastAdmixMelt, subset = seflPastAdmixMelt$Ancestry %in% c("cluster3.1", "cluster3.2", "cluster3.3")), aes(x = ord, y = Fraction, fill = Ancestry, order = sample)) +
geom_segment(data = popAnno, aes(x = x1, xend = x2, y = y1, yend = y2, color = Region), size = 7) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25", size = 0.2) +
geom_text(aes(x = ord, label = clones), y = 0.05, size = 2.8, fontface = "bold") +
facet_grid(.~ Region, scales = "free", switch = "both", space = "free") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0.001, 0.001)) +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = flPal) +
ggtitle(expression(paste(italic("K")," = 3", sep =""))) +
coord_cartesian(ylim = c(-0.01, 1.01), clip = "off")
admixPlotK3 = admixPlotK3A + admixTheme
admixPlotK3
ggsave("figures/admixturePlotK3.png", plot = admixPlotK3, width = 15, height = 5, units = "cm", dpi = 300)
bayesAss = read.delim("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/bayesAss/BA3trace01.txt") %>% filter(State > 2000000) %>% dplyr::select(-State, -LogProb, -X)
baMean = bayesAss %>% summarise(across(everything(), list(mean))) %>% t() %>% as_tibble() %>% rename(., mean=V1) %>% mutate(pops = colnames(bayesAss))
baSumm = bayesAss %>% summarise(across(everything(), list(median))) %>% t() %>% as_tibble() %>% rename(., median=V1) %>% mutate(pops = baMean$pops, mean = round(baMean$mean, 3)) %>% relocate(median, .after = mean)
#takes median and makes it only 3 decimal places
baSumm$median = round(baSumm$median, 3)
library(TeachingDemos)
baHpd =as.data.frame(t(sapply(bayesAss, emp.hpd)))
colnames(baHpd) = c("hpdLow", "hpdHigh")
baHpd$pops = rownames(baHpd)
library(LaplacesDemon)
ESS = as.data.frame(sapply(bayesAss, ESS))
baSumm = baSumm %>% left_join(baHpd)
baSumm$hpdLow = round(baSumm$hpdLow, 3)
baSumm$hpdHigh = round(baSumm$hpdHigh, 3)
baSumm$ESS = ESS
#figure out how your pops are numbered by looking at one of your BAOut files
## Population Index -> Population Label:
#0->jupiter
#1->westpalm
#2->boynton
#3->stlucie
#4->pompano
#i and j are the sink & source populations
#i is the sink, j is the source
#write out how you want it to appear on your stepwise plot
popi = rep(c("Jupiter", "West Palm Beach", "Boynton Beach", "St. Lucie Reef", "Ft. Lauderdale"), each = 5)
popj = rep(c("Jupiter", "West Palm Beach", "Boynton Beach", "St. Lucie Reef", "Ft. Lauderdale"), times = 5)
baSumm = baSumm %>% mutate(pop.i = popi, pop.j = popj) %>% relocate(c(pop.i, pop.j), .after = pops) %>% dplyr::select(-pops)
baSumm$pop.i = factor(baSumm$pop.i)
#levels(baSumm$pop.i)
baSumm$pop.i = factor(baSumm$pop.i, levels = levels(baSumm$pop.i)[c(4, 3, 5, 1, 2)])
baSumm$pop.j = factor(baSumm$pop.j)
baSumm$pop.j = factor(baSumm$pop.j, levels = levels(baSumm$pop.j)[c(4, 3, 5, 1, 2)])
baSumm$mean = sprintf('%.3f', baSumm$mean)
baSumm$hpdLow = sprintf('%.3f', baSumm$hpdLow)
baSumm$hpdHigh = sprintf('%.3f', baSumm$hpdHigh)
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
migrateA = ggplot(data = baSumm, aes(pop.i, pop.j, fill = as.numeric(as.character(mean)))) +
geom_tile(color = "white") +
geom_segment(data = baSumm, aes(x = 0.4755, xend = -0.65, y = pop.j, yend = pop.j, color = pop.j), size = 16) + #changing y bar of pop names
geom_segment(data = baSumm, aes(x = pop.i, xend = pop.i, y = 0.45, yend = -0.1, color = pop.i), size = 35) + #changing x bar of pop names
scale_color_manual(values = flPal[c(1:5, 1:5)], guide = NULL) +
scale_fill_gradientn(colours = paletteer_c("viridis::viridis", n = 10)[3:10], limit = c(0,0.23), space = "Lab", name = expression(paste(italic("m"))), na.value = "gray85",  guide = "colourbar", values = c(0, 0.05, 0.1, 0.15, 0.2,0.5,0.75,1)) + #key for color scale of heatmap
geom_text(data = baSumm, aes(x = pop.i, y = pop.j, label = paste(mean, "\n", sep = "")), color = ifelse(baSumm$mean > 0.6, "red", "gray5"), fontface = "bold") + #format for center values (i.e. PMP vs PMP)
geom_text(data = baSumm, aes(x = pop.i, y = pop.j, label = paste("\n(",hpdLow,"–",hpdHigh, ")", sep = "")), color = ifelse(baSumm$mean > 0.6, "red", "gray5"), size = 3.25) +
labs(x = "Sink", y = "Source") +
guides(fill = guide_colorbar(barwidth = 1, barheight = 10, title.position = "top", title.hjust = 0.5, frame.colour = "black", frame.linewidth = 1, ticks.colour = "black")) + #m coefficient scale key
scale_y_discrete(limits = rev(levels(baSumm$pop.i))[c(1:5)], position = "left") +
# scale_x_discrete() +
coord_cartesian(xlim = c(1, 5), ylim = c(1, 5), clip = "off") +
theme_minimal()
migrate = migrateA + theme(
axis.text.x = element_text(vjust = 1, size = 9, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 9, color = "black"),
axis.title.x = element_text(size = 14, vjust = -1.5),
axis.title.y = element_text(size = 14),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 10)
)
migrate
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/migrate.png", plot = migrate, width = 20, height = 8, units = "cm", dpi = 300)
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/migrate.svg", plot = migrate, width = 20, height = 8, units = "cm", dpi = 300)
library(tidyverse)
#packages: tidyverse, lubridate, measurements, sf, rnaturalearth
pastSamples = read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv", header = TRUE) %>% select(sample = tube_id, !sample_id)
pastSamples$region = factor(pastSamples$region)
pastSamples$region = factor(pastSamples$region, levels = levels(pastSamples$region)[c(4, 2, 5, 1, 3)])
pastSamples$collection_date = mdy(pastSamples$collection_date) %>% format("%d %b %Y")
pastSamples$depthM = conv_unit(pastSamples$collection_depth_ft, from = "ft", to = "m") %>% round(1)
seflSites = pastSamples %>% group_by(region)%>% summarize(latDD = first(site_lat), longDD = first(site_long), depthRangeM = paste(min(depthM), "-", max(depthM), sep = ""), n = n(), date = as.character(min(collection_date))) %>% droplevels() %>% as.data.frame()
View(pastSamples)
states = st_as_sf(ne_states(country = c("United States of America")))
countries = st_as_sf(ne_countries(country = c("Cuba", "The Bahamas")))
florida = read_sf("data_files/shp/flCountiesLo.shp") %>% st_transform(crs = 4326)
frt = read_sf("data_files/shp/flReefs.shp") %>% st_transform(crs = 4326)
countyNames = st_as_sf(maps::map("county", plot = FALSE, fill = TRUE)) %>% st_transform(crs = 4326) %>% filter(grepl("florida", ID)) %>% filter(grepl("palm beach|broward|martin", ID))
countyNames$ID = c("Broward \nCounty", "Martin \nCounty", "Palm Beach \nCounty")
popLabs = pastSamples %>% group_by(region)%>% summarize(latDD = first(site_lat), longDD = first(site_long))
library(tidyverse)
#packages: tidyverse, lubridate, measurements, sf, rnaturalearth
pastSamples = read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv", header = TRUE) %>% select(sample = tube_id, !sample_id)
pastSamples$region = factor(pastSamples$region)
pastSamples$region = factor(pastSamples$region, levels = levels(pastSamples$region)[c(4, 2, 5, 1, 3)])
pastSamples$collection_date = mdy(pastSamples$collection_date) %>% format("%d %b %Y")
pastSamples$depthM = conv_unit(pastSamples$collection_depth_ft, from = "ft", to = "m") %>% round(1)
seflSites = pastSamples %>% group_by(region)%>% summarize(latDD = first(site_lat), longDD = first(site_long), depthRangeM = paste(min(depthM), "-", max(depthM), sep = ""), n = n(), date = as.character(min(collection_date))) %>% droplevels() %>% as.data.frame()
install.packages(c("dplyr", "plyr"))
install.packages(c("dplyr", "plyr"))
install.packages(c("dplyr", "plyr"))
install.packages(c("dplyr", "plyr"))
install.packages(c("dplyr", "plyr"))
install.packages("dbplyr")
knitr::opts_chunk$set(echo = TRUE)
# setup rmarkdown environment first
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = 'left')
options(timeout=600)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis", "ropensci/rnaturalearthhires")
pacman::p_load("cowplot", "ggrepel", "ggspatial", "maps", "paletteer", "patchwork", "rgdal", "rnaturalearth", "sf", "tidyverse", "reshape2", "MCMC.OTU", "pairwiseAdonis", "RColorBrewer", "Redmonder", "flextable", "lubridate", "officer", "adegenet", "dendextend", "gdata", "ggdendro", "hierfstat", "Imap", "kableExtra", "poppr", "StAMPP", "vcfR", "vegan", "boa", "measurements", "magick", "rgeos", "magrittr", "ggplot2", "rstatix", "ggpubr", "Hmisc")
library(tidyverse)
#packages: tidyverse, lubridate, measurements, sf, rnaturalearth
pastSamples = read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv", header = TRUE) %>% select(sample = tube_id, !sample_id)
pastSamples$region = factor(pastSamples$region)
pastSamples$region = factor(pastSamples$region, levels = levels(pastSamples$region)[c(4, 2, 5, 1, 3)])
pastSamples$collection_date = mdy(pastSamples$collection_date) %>% format("%d %b %Y")
pastSamples$depthM = conv_unit(pastSamples$collection_depth_ft, from = "ft", to = "m") %>% round(1)
seflSites = pastSamples %>% group_by(region) %>% summarize(latDD = first(site_lat), longDD = first(site_long), depthRangeM = paste(min(depthM), "-", max(depthM), sep = ""), n = n(), date = as.character(min(collection_date))) %>% droplevels() %>% as.data.frame()
seflSites = pastSamples %>% group_by(region) %>% summarise(latDD = first(site_lat), longDD = first(site_long), depthRangeM = paste(min(depthM), "-", max(depthM), sep = ""), n = n(), date = as.character(min(collection_date))) %>% droplevels() %>% as.data.frame()
states = st_as_sf(ne_states(country = c("United States of America")))
countries = st_as_sf(ne_countries(country = c("Cuba", "The Bahamas")))
florida = read_sf("data_files/shp/flCountiesLo.shp") %>% st_transform(crs = 4326)
frt = read_sf("data_files/shp/flReefs.shp") %>% st_transform(crs = 4326)
countyNames = st_as_sf(maps::map("county", plot = FALSE, fill = TRUE)) %>% st_transform(crs = 4326) %>% filter(grepl("florida", ID)) %>% filter(grepl("palm beach|broward|martin", ID))
countyNames$ID = c("Broward \nCounty", "Martin \nCounty", "Palm Beach \nCounty")
popLabs = pastSamples %>% group_by(region)%>% summarize(latDD = first(site_lat), longDD = first(site_long))
popLabs = pastSamples %>% group_by(region)%>% summarise(latDD = first(site_lat), longDD = first(site_long))
levels(popLabs$region) = c("St. Lucie", "Jupiter", "West Palm", "Boynton", "Ft. Lauderdale")
baSumm$mean = as.numeric(baSumm$mean)
bayesAss = read.delim("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/bayesAss/BA3trace01.txt") %>% filter(State > 2000000) %>% dplyr::select(-State, -LogProb, -X)
baMean = bayesAss %>% summarise(across(everything(), list(mean))) %>% t() %>% as_tibble() %>% rename(., mean=V1) %>% mutate(pops = colnames(bayesAss))
baSumm = bayesAss %>% summarise(across(everything(), list(median))) %>% t() %>% as_tibble() %>% rename(., median=V1) %>% mutate(pops = baMean$pops, mean = round(baMean$mean, 3)) %>% relocate(median, .after = mean)
#takes median and makes it only 3 decimal places
baSumm$median = round(baSumm$median, 3)
library(TeachingDemos)
baHpd =as.data.frame(t(sapply(bayesAss, emp.hpd)))
colnames(baHpd) = c("hpdLow", "hpdHigh")
baHpd$pops = rownames(baHpd)
library(LaplacesDemon)
ESS = as.data.frame(sapply(bayesAss, ESS))
baSumm = baSumm %>% left_join(baHpd)
baSumm$hpdLow = round(baSumm$hpdLow, 3)
baSumm$hpdHigh = round(baSumm$hpdHigh, 3)
baSumm$ESS = ESS
#figure out how your pops are numbered by looking at one of your BAOut files
## Population Index -> Population Label:
#0->jupiter
#1->westpalm
#2->boynton
#3->stlucie
#4->pompano
#i and j are the sink & source populations
#i is the sink, j is the source
#write out how you want it to appear on your stepwise plot
popi = rep(c("Jupiter", "West Palm Beach", "Boynton Beach", "St. Lucie Reef", "Ft. Lauderdale"), each = 5)
popj = rep(c("Jupiter", "West Palm Beach", "Boynton Beach", "St. Lucie Reef", "Ft. Lauderdale"), times = 5)
baSumm = baSumm %>% mutate(pop.i = popi, pop.j = popj) %>% relocate(c(pop.i, pop.j), .after = pops) %>% dplyr::select(-pops)
baSumm$pop.i = factor(baSumm$pop.i)
#levels(baSumm$pop.i)
baSumm$pop.i = factor(baSumm$pop.i, levels = levels(baSumm$pop.i)[c(4, 3, 5, 1, 2)])
baSumm$pop.j = factor(baSumm$pop.j)
baSumm$pop.j = factor(baSumm$pop.j, levels = levels(baSumm$pop.j)[c(4, 3, 5, 1, 2)])
baSumm$mean = as.numeric(baSumm$mean)
baSumm$hpdLow = as.numeric(baSumm$hpdLow)
baSumm$hpdHigh = as.numeric(baSumm$hpdHigh)
pastSamples = read.csv("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/poritesastreoidesMetaData_clonesremoved.csv", header = TRUE) %>% select(sample = tube_id, !sample_id, Population = region)
pastSamples$Population[pastSamples$Population=="Pompano/LBTS"]<-"Ft. Lauderdale"
library(lubridate)
library(measurements)
pastSamples$Population = factor(pastSamples$Population)
levels(pastSamples$Population)
pastSamples$Population = factor(pastSamples$Population, levels = levels(pastSamples$Population)[c(4, 3, 5, 1, 2)])
pastSamples$depthM = conv_unit(pastSamples$collection_depth_ft, from = "ft", to = "m") %>% round(1)
seflSites = pastSamples %>% group_by(Population)%>% summarise(latDD = first(site_lat), longDD = first(site_long),
depthRangeM = paste(min(depthM), "-", max(depthM), sep = ""),
n = n()) %>% droplevels() %>% as.data.frame()
seflPastPopsMigrate = seflSites %>% group_by(Population) %>% summarise(latDD = first(latDD), longDD = first(longDD)) %>% filter(Population %in% c("St. Lucie Reef", "Jupiter", "West Palm Beach", "Boynton Beach", "Ft. Lauderdale")) %>% droplevels()
library(paletteer)
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
migratePal = c("St. Lucie Reef" = flPal[1], "Jupiter" = flPal[2], "West Palm Beach" = flPal[3], "Boynton Beach" = flPal[4], "Ft. Lauderdale" = flPal[5])
baMapData = baSumm %>% left_join(seflPastPopsMigrate, by = c("pop.i" = "Population")) %>% left_join(seflPastPopsMigrate, by = c("pop.j" = "Population"), suffix = c(".i", ".j")) %>% filter(hpdLow > 0.00)
for(x in 1:nrow(baMapData)) {
if (baMapData$pop.i[x] == baMapData$pop.j[x]) {
baMapData$latDD.i[x] = NA;
baMapData$latDD.j[x] = NA;
baMapData$longDD.i[x] = NA;
baMapData$longDD.j[x] = NA;
baMapData$mean[x] = NA;
baMapData$median[x] = NA
}
}
library(sf)
florida = read_sf("data_files/shp/flCountiesLo.shp") %>% st_transform(crs = 4326)
frt = read_sf("data_files/shp/flReefs.shp") %>% st_transform(crs = 4326)
countyNames = st_as_sf(maps::map("county", plot = FALSE, fill = TRUE)) %>% st_transform(crs = 4326) %>% filter(grepl("florida", ID)) %>% filter(grepl("palm beach|broward|martin", ID))
countyNames$ID = c("Broward \nCounty", "Martin \nCounty", "Palm Beach \nCounty")
library(ggspatial)
migrateMap = ggplot() +
geom_sf(data = florida, fill = "white", size = 0.25) +
geom_curve(data = baMapData[c(2,4),], aes(x = longDD.j, y = latDD.j, xend = longDD.i+0.01, yend = latDD.i-0.023, color = pop.j, size = mean), arrow = arrow(type = "open", length = unit(0.0225, "npc")), curvature = 0.3) +
geom_curve(data = baMapData[c(6),], aes(x = longDD.j, y = latDD.j, xend = longDD.i+0.01, yend = latDD.i-0.021, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), curvature = 0.3) +
geom_curve(data = baMapData[c(7),], aes(x = longDD.j, y = latDD.j, xend = longDD.i+0.02, yend = latDD.i-0.02, color = pop.j, size = mean), arrow = arrow(type = "open", length = unit(0.0225, "npc")), curvature = 0.5) +
geom_curve(data = baMapData[c(9),], aes(x = longDD.j, y = latDD.j, xend = longDD.i-0.025, yend = latDD.i+0.01, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), curvature = 0.4) +
geom_curve(data = baMapData[c(10),], aes(x = longDD.j, y = latDD.j, xend = longDD.i, yend = latDD.i+0.025, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), curvature = 0.3) +
#  geom_curve(data = baMapData, aes(x = longDD.j, y = latDD.j, xend = longDD.i, yend = latDD.i, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), alpha = 0.7,  curvature = -0.3, na.rm = TRUE) +
geom_point(data = seflPastPopsMigrate, aes(x = longDD, y = latDD, fill = Population), size = 3.5, shape = 21) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = migratePal, guide = NULL) +
scale_size(range = c(0.5, 2), breaks = c(0.05,0.1,0.15,0.20), name = expression(paste(italic("m")))) +
coord_sf(xlim = c(-80.6, -79.6), ylim = c(26, 27.2)) +
scale_x_continuous(breaks = c(seq(-80.6, -79.6, by = 0.2))) +
scale_y_continuous(breaks = c(seq(26, 27.2, by = 0.2))) +
annotation_scale(location = "br") +
annotation_north_arrow(location = "br", which_north = "true", style = north_arrow_minimal(), pad_x = unit(-0.25, "cm") , pad_y = unit(0.75, "cm")) +
guides(fill = guide_legend(override.aes = list(shape = 22, color = NA, size = 4), order = 1)) +
#size = guide_legend(override.aes = list(linetype = 1, shape = NA, alpha = 1), order = 2, ncol = 3)) +
theme_bw() +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.border = element_rect(color = "black", size = 0.75, fill = NA),
axis.title = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.box = "vertical",
#legend.key = element_blank(),
#          legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA),
#  panel.background = element_rect(fill = "transparent", colour = NA),
#  rect = element_rect(fill = "transparent"),
#        legend.background = element_blank()
)
migrateMap
migrateMap = ggplot() +
geom_sf(data = florida, fill = "white", size = 0.25) +
geom_curve(data = baMapData[c(2,4),], aes(x = longDD.j, y = latDD.j, xend = longDD.i+0.01, yend = latDD.i-0.023, color = pop.j, size = mean), arrow = arrow(type = "open", length = unit(0.0225, "npc")), curvature = 0.3) +
geom_curve(data = baMapData[c(6),], aes(x = longDD.j, y = latDD.j, xend = longDD.i+0.01, yend = latDD.i-0.021, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), curvature = 0.3) +
geom_curve(data = baMapData[c(7),], aes(x = longDD.j, y = latDD.j, xend = longDD.i+0.02, yend = latDD.i-0.02, color = pop.j, size = mean), arrow = arrow(type = "open", length = unit(0.0225, "npc")), curvature = 0.5) +
geom_curve(data = baMapData[c(9),], aes(x = longDD.j, y = latDD.j, xend = longDD.i-0.025, yend = latDD.i+0.01, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), curvature = 0.4) +
geom_curve(data = baMapData[c(10),], aes(x = longDD.j, y = latDD.j, xend = longDD.i, yend = latDD.i+0.025, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), curvature = 0.3) +
#  geom_curve(data = baMapData, aes(x = longDD.j, y = latDD.j, xend = longDD.i, yend = latDD.i, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), alpha = 0.7,  curvature = -0.3, na.rm = TRUE) +
geom_point(data = seflPastPopsMigrate, aes(x = longDD, y = latDD, fill = Population), size = 3.5, shape = 21) +
geom_sf_text(data = countyNames, aes(label = ID), nudge_x = c(0.1, 0, 0.1),
nudge_y = c(0, -.025, -0.1)) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = migratePal, guide = NULL) +
scale_size(range = c(0.5, 2), breaks = c(0.05,0.1,0.15,0.20), name = expression(paste(italic("m")))) +
coord_sf(xlim = c(-80.6, -79.6), ylim = c(26, 27.2)) +
scale_x_continuous(breaks = c(seq(-80.6, -79.6, by = 0.2))) +
scale_y_continuous(breaks = c(seq(26, 27.2, by = 0.2))) +
annotation_scale(location = "br") +
annotation_north_arrow(location = "br", which_north = "true", style = north_arrow_minimal(), pad_x = unit(-0.25, "cm") , pad_y = unit(0.75, "cm")) +
guides(fill = guide_legend(override.aes = list(shape = 22, color = NA, size = 4), order = 1)) +
#size = guide_legend(override.aes = list(linetype = 1, shape = NA, alpha = 1), order = 2, ncol = 3)) +
theme_bw() +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.border = element_rect(color = "black", size = 0.75, fill = NA),
axis.title = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.box = "vertical",
#legend.key = element_blank(),
#          legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA),
#  panel.background = element_rect(fill = "transparent", colour = NA),
#  rect = element_rect(fill = "transparent"),
#        legend.background = element_blank()
)
migrateMap
migrateMap = ggplot() +
geom_sf(data = florida, fill = "white", size = 0.25) +
geom_sf(data = frt, fill = "gray80", size = 0) +
geom_curve(data = baMapData[c(2,4),], aes(x = longDD.j, y = latDD.j, xend = longDD.i+0.01, yend = latDD.i-0.023, color = pop.j, size = mean), arrow = arrow(type = "open", length = unit(0.0225, "npc")), curvature = 0.3) +
geom_curve(data = baMapData[c(6),], aes(x = longDD.j, y = latDD.j, xend = longDD.i+0.01, yend = latDD.i-0.021, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), curvature = 0.3) +
geom_curve(data = baMapData[c(7),], aes(x = longDD.j, y = latDD.j, xend = longDD.i+0.02, yend = latDD.i-0.02, color = pop.j, size = mean), arrow = arrow(type = "open", length = unit(0.0225, "npc")), curvature = 0.5) +
geom_curve(data = baMapData[c(9),], aes(x = longDD.j, y = latDD.j, xend = longDD.i-0.025, yend = latDD.i+0.01, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), curvature = 0.4) +
geom_curve(data = baMapData[c(10),], aes(x = longDD.j, y = latDD.j, xend = longDD.i, yend = latDD.i+0.025, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), curvature = 0.3) +
#  geom_curve(data = baMapData, aes(x = longDD.j, y = latDD.j, xend = longDD.i, yend = latDD.i, color = pop.j, size = mean), arrow = arrow(type = "closed", length = unit(0.0225, "npc")), alpha = 0.7,  curvature = -0.3, na.rm = TRUE) +
geom_point(data = seflPastPopsMigrate, aes(x = longDD, y = latDD, fill = Population), size = 3.5, shape = 21) +
geom_sf_text(data = countyNames, aes(label = ID), nudge_x = c(0.1, 0, 0.1),
nudge_y = c(0, -.025, -0.1)) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = migratePal, guide = NULL) +
scale_size(range = c(0.5, 2), breaks = c(0.05,0.1,0.15,0.20), name = expression(paste(italic("m")))) +
coord_sf(xlim = c(-80.6, -79.6), ylim = c(26, 27.2)) +
scale_x_continuous(breaks = c(seq(-80.6, -79.6, by = 0.2))) +
scale_y_continuous(breaks = c(seq(26, 27.2, by = 0.2))) +
annotation_scale(location = "br") +
annotation_north_arrow(location = "br", which_north = "true", style = north_arrow_minimal(), pad_x = unit(-0.25, "cm") , pad_y = unit(0.75, "cm")) +
guides(fill = guide_legend(override.aes = list(shape = 22, color = NA, size = 4), order = 1)) +
#size = guide_legend(override.aes = list(linetype = 1, shape = NA, alpha = 1), order = 2, ncol = 3)) +
theme_bw() +
theme(panel.background = element_rect(fill = "aliceblue"),
panel.border = element_rect(color = "black", size = 0.75, fill = NA),
axis.title = element_blank(),
axis.ticks = element_line(color = "black"),
axis.text = element_text(color = "black"),
#legend.position = "bottom",
#legend.direction = "horizontal",
legend.box = "vertical",
#legend.key = element_blank(),
#          legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA),
#  panel.background = element_rect(fill = "transparent", colour = NA),
#  rect = element_rect(fill = "transparent"),
#        legend.background = element_blank()
)
migrateMap
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/migrateMap.png", plot = migrateMap, width = 20, height = 15, units = "cm",dpi = 300)
#export with transparent background
#ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/denovo_mapped/figures/migrateMap_nobg.png", plot = migrateMap, width = 25.5, height = 15, units = "cm",dpi = 300, bg = "transparent")
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/migrateMap.svg", plot = migrateMap, width = 20, height = 15, units = "cm",dpi = 300)
