RDAfull <- rda(pastMa ~ lat + depth + BO22_nitratemean_bdmean, envData2)
set.seed(092)
bestDbrda <- ordiR2step(rda0, rda1)
bestDbrda$anova
#neither nitrate nor PCs of genetic structure were selected for in best model, so removing at this step
#PAR deemed not ecologically relevant after further examination
model = envData2 %>% dplyr::select("Depth" = depth, "Latitude" = lat)
pastDbrda = dbrda(pastMa ~ Depth + Latitude, model)
pastRdaVar = round(pastDbrda$CA$eig/sum(pastDbrda$CA$eig)*100, 1)
head(pastRdaVar)
pastRdaPoints = as.data.frame(scores(pastDbrda)$sites)
pastRdaPoints$sample = popData$sample
head(pastRdaPoints)
pastDbrdaData1 = popData %>% left_join(pastRdaPoints)
head(pastDbrdaData1)
tail(pastDbrdaData1)
envLoad = as.data.frame(pastDbrda$CCA$biplot)
envLoad$var = row.names(envLoad)
pastDbrdaData = merge(pastDbrdaData1, aggregate(cbind(mean.x = dbRDA1, mean.y = dbRDA2)~Population, pastDbrdaData1, mean), by="Population")
pastDbrdaData$Population = factor(pastDbrdaData$Population)
levels(pastDbrdaData$Population)
pastDbrdaData$Population = factor(pastDbrdaData$Population, levels(pastDbrdaData$Population)[c(4, 3, 5, 1, 2)])
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
#building plot for Figure 3
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.25, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
pastDbrdaPlot1 = pastDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
ggsave("genome_mapped/figures/DbrdaPlot.tiff", plot = pastDbrdaPlot1, height = 3.5, width = 7, units = "in", dpi = 600)
pastVcf = read.vcfR("data_files/pastNoClones.bcf", verbose = FALSE)
pastGenlightPopulation = vcfR2genlight(pastVcf, n.cores = 1)
locNames(pastGenlightPopulation) = paste(pastVcf@fix[,1],pastVcf@fix[,2],sep="_")
popData = read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "pop" = region)
strata(pastGenlightPopulation) = data.frame(popData)
setPop(pastGenlightPopulation) = ~pop
pastGenlightPopulation$pop = factor(pastGenlightPopulation$pop)
levels(pastGenlightPopulation$pop)
pastGenlightPopulation$pop = factor(pastGenlightPopulation$pop,
levels(pastGenlightPopulation$pop)[c(4, 1, 2, 3, 5)])
set.seed(694)
#99 permutations
sefl.fst <- stamppFst(pastGenlightPopulation, nboots = 99, percent = 95, nclusters = 2)
sefl.fst$Fsts
sefl.fst$Pvalues
#Generating heat map of pairwise Fst values
#reordering my samples to stay formatted properly for the matrix, and still have them go north to south
pop.order = c("Pompano/LBTS", "Boynton Beach", "West Palm Beach", "Jupiter", "St. Lucie Reef")
#reads in Fst matrix
snpFstMa <- as.matrix(sefl.fst$Fsts)
#rebuilding the matrix based on order of populations
upperTriangle(snpFstMa, byrow = TRUE) <- lowerTriangle(snpFstMa)
snpFstMa <- snpFstMa[,pop.order] %>% .[pop.order,]
snpFstMa[upper.tri(snpFstMa)] <- NA
snpFstMa <- as.data.frame(snpFstMa)
snpFstMa$Pop = factor(row.names(snpFstMa))
snpQMa <- as.matrix(sefl.fst$Pvalues)
upperTriangle(snpQMa, byrow=TRUE) <- lowerTriangle(snpQMa)
snpQMa <- snpQMa[,pop.order] %>%
.[pop.order,]
snpQMa[upper.tri(snpQMa)] <- NA
snpQMa <- as.data.frame(snpQMa)
snpQMa$Pop = factor(row.names(snpQMa), levels = unique(pop.order))
snpFstMa$Pop = factor(row.names(snpFstMa), levels = unique(pop.order))
snpFst = melt(snpFstMa, id.vars = "Pop", value.name = "Fst", variable.name = "Pop2", na.rm = FALSE)
snpFst$Fst = round(snpFst$Fst, 3)
snpFst = snpFst %>% mutate(Fst = replace(Fst, Fst < 0, 0))
snpQ = melt(snpQMa, id.vars = "Pop", value.name = "Pval", variable.name = "Pop2", na.rm = FALSE)
snpQ$Qval = p.adjust(snpQ$Pval, method = "BH")
snpFst$region = snpFst$Pop
snpFst$region = factor(gsub("\\n.*", "", snpFst$region))
snpFst$region = factor(snpFst$region, levels = levels(snpFst$region)[c(4, 2, 5, 1, 3)])
snpFst$region2 = snpFst$Pop2
snpFst$region2 = factor(gsub("\\n.*", "", snpFst$region2))
snpFst$region2 = factor(snpFst$region2, levels = levels(snpFst$region2)[c(4, 2, 5, 1, 3)])
snpFst$Fst = sprintf('%.3f', snpFst$Fst)
snpFst$Fst = factor(gsub("\\NA", NA, snpFst$Fst))
snpFst$Fst = factor(gsub("\\.000", "", snpFst$Fst))
snpFst$Fst = factor(gsub("\\-", "", snpFst$Fst))
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
snpHeatmapA = ggplot(data = snpFst, aes(Pop, Pop2, fill = as.numeric(as.character(Fst))))+
geom_tile(color = "white") +
geom_segment(data = snpFst, aes(x = 0.48, xend = -0.43, y = Pop, yend = Pop, color = region), size = 23) + #edits y-axis pop titles, x changes x-axis width of color bars into the right/Fst side, xend changes width on the left side
geom_segment(data = snpFst, aes(x = Pop2, xend = Pop2, y = 0.45, yend = -0.7, color = region2), size = 77.5) + #size changes width of color boxes
scale_color_manual(values = flPal[], guide = NULL) +
scale_fill_gradient(low = "white", high = "mediumorchid4", limit = c(0, 0.07), space = "Lab", name = expression(paste(italic("F")[ST])), na.value = "white",  guide = "colourbar") +
geom_text(data = snpFst, aes(Pop, Pop2, label = Fst), color = ifelse(snpQ$Qval <= 0.05,"black", "darkgrey"), size = ifelse(snpQ$Qval < 0.05, 6, 5), fontface = ifelse (snpQ$Qval < 0.05, "bold", "plain")) +
guides(fill = guide_colorbar(barwidth = 12, barheight = 1, title.position = "top", title.hjust = 0.5)) +
scale_y_discrete(position = "left", limits = (levels(snpFst$Pop2))[c(1:4)]) +
scale_x_discrete(limits = rev(levels(snpFst$Pop))[c(1:4)]) +
coord_cartesian(xlim = c(1, 4), ylim = c(1, 4), clip = "off") +
theme_minimal()
snpHeatmap = snpHeatmapA + theme(
axis.text.x = element_text(vjust = 1, size = 16, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 16, color = "black"),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid = element_blank(),
panel.border = element_blank(),
plot.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
legend.position = c(0.7, 0.87),
legend.direction = "horizontal",
legend.title = element_text(size = 16),
legend.text = element_text(size = 14),
plot.title = element_text(size = 16))
snpHeatmap
#export with transparent background
#ggsave("figures/fstHeatMap_nocolor_nobg.png", plot = snpHeatmap, width = 30, h
ggsave("figures/fstHeatMap_GENOME_purple.tiff", plot = snpHeatmap, width = 30, height = 9, units = "cm", dpi = 600)
kColPal3 = c("#AFDE62", "mediumpurple3", "#FF8C8D")
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
admixpops = read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Region" = region)
##Figure for manuscript visualizing only K = 3
clumpp3 = read.table("data_files/pastClumpK3.output", header = FALSE)
clumpp3$V1 = admixpops$sample
seflPastAdmix = admixpops %>% left_join(clumpp3[,c(1,6:8)], by = c("sample" = "V1")) %>% rename("cluster3.1" = "V6", "cluster3.2" = "V7", "cluster3.3" = "V8")
seflPastAdmix$Region = factor(seflPastAdmix$Region)
seflPastAdmix$Region = factor(seflPastAdmix$Region, levels(seflPastAdmix$Region)[c(4, 2, 5, 1, 3)])
levels(seflPastAdmix$Region)[1] = "St. Lucie"
levels(seflPastAdmix$Region)[5] = "Ft. Lauderdale"
seflPastAdmix = arrange(seflPastAdmix, Region, -cluster3.1)
cloneCounts = c("8","20","6","","","3","","","","","","5","","","","2","","","","","5","","","","","","","","","","","","3","8","","")
seflPastAdmix$clones = cloneCounts
popCounts = seflPastAdmix %>% group_by(Region) %>% dplyr::summarize(n = n())
popCounts
popCountList = reshape2::melt(lapply(popCounts$n,function(x){c(1:x)}))
seflPastAdmix$ord = popCountList$value
seflPastAdmixMelt = melt(seflPastAdmix, id.vars=c("sample", "Region", "ord", "clones"), variable.name="Ancestry", value.name="Fraction")
seflPastAdmixMelt$Ancestry = factor(seflPastAdmixMelt$Ancestry)
seflPastAdmixMelt$Ancestry = factor(seflPastAdmixMelt$Ancestry, levels = rev(levels(seflPastAdmixMelt$Ancestry)))
write_excel_csv(seflPastAdmixMelt, file= 'Samples in each K.csv')
#making segments that are color coded by population
#x2 is number of samples for each plot plus 0.7 to ordinate spacing of columns
popAnno = data.frame(x1 = c(0.3, 0.3, 0.3, 0.3, 0.3), x2 = c(3.7, 10.7, 7.7, 10.7, 6.7), y1 = -0.12, y2 = -0.12, sample = NA, Ancestry = NA, ord  = NA, Fraction = NA,Region= c("St. Lucie", "Jupiter", "West Palm Beach", "Boynton Beach", "Ft. Lauderdale"))
popAnno$Region = factor(popAnno$Region)
popAnno$Region = factor(popAnno$Region, levels = levels(popAnno$Region)[c(4, 3, 5, 1, 2)])
admixTheme = theme_bw()+
theme(plot.title = element_text(hjust = 0, size = 10),
panel.grid = element_blank(),
panel.background = element_rect(fill = "gray25", colour = "gray25"),
panel.border = element_rect(fill = NA, color = "black", size = 1, linetype = "solid"),
panel.spacing.x = grid:::unit(0.05, "lines"),
panel.spacing.y = grid:::unit(0.05, "lines"),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(),
axis.title = element_blank(),
strip.background.x = element_blank(),
strip.background.y = element_blank(),
strip.text = element_text(size = 8),
strip.text.y.left = element_text(size = 10, angle = 90),
strip.text.x.bottom = element_text(vjust = -.1, color = "black"),
legend.key = element_blank(),
legend.position = "none",
legend.title = element_text(size = 8))
admixPlotK3A = ggplot(data = subset(seflPastAdmixMelt, subset = seflPastAdmixMelt$Ancestry %in% c("cluster3.1", "cluster3.2", "cluster3.3")), aes(x = ord, y = Fraction, fill = Ancestry, order = sample)) +
geom_segment(data = popAnno, aes(x = x1, xend = x2, y = y1, yend = y2, color = Region), size = 7) +
geom_bar(stat = "identity", position = "fill", width = 1, colour = "grey25", size = 0.2) +
geom_text(aes(x = ord, label = clones), y = 0.05, size = 2.8, fontface = "bold") +
facet_grid(.~ Region, scales = "free", switch = "both", space = "free") +
scale_x_discrete(expand = c(0, 0)) +
scale_y_continuous(expand = c(0.001, 0.001)) +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = flPal) +
ggtitle(expression(paste(italic("K")," = 3", sep =""))) +
coord_cartesian(ylim = c(-0.01, 1.01), clip = "off")
admixPlotK3 = admixPlotK3A + admixTheme
admixPlotK3
ggsave("figures/admixturePlotK3.tiff", plot = admixPlotK3, width = 15, height = 5, units = "cm", dpi = 600)
cloneBams = read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv")
cloneMa = as.matrix(read.table("data_files/pastNoClones.ibsMat"))
dimnames(cloneMa) = list(cloneBams[,1],cloneBams[,1])
clonesHc = hclust(as.dist(cloneMa),"ave")
clonePops = cloneBams$lineage
cloneSite = cloneBams$region
NocloneDend = cloneMa %>% as.dist() %>% hclust(.,"ave") %>%
as.dendrogram()
cloneDData = NocloneDend %>% dendro_data()
#Making the branches hang shorter so we can easily see clonal groups
cloneDData$segments$yend2 = cloneDData$segments$yend
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend2[i] == 0) {
cloneDData$segments$yend2[i] = (cloneDData$segments$y[i] - 0.01)}}
cloneDendPoints = cloneDData$labels
cloneDendPoints$pop = clonePops[order.dendrogram(NocloneDend)]
cloneDendPoints$site=cloneSite[order.dendrogram(NocloneDend)]
rownames(cloneDendPoints) = cloneDendPoints$label
# Making points at the leaves to place symbols for populations
point = as.vector(NA)
for(i in 1:nrow(cloneDData$segments)) {
if (cloneDData$segments$yend[i] == 0) {
point[i] = cloneDData$segments$y[i] - 0.01
} else {
point[i] = NA}}
cloneDendPoints$y = point[!is.na(point)]
cloneDendPoints$pop = factor(cloneDendPoints$pop)
cloneDendPoints$site = factor(cloneDendPoints$site)
cloneDendPoints$site = factor(cloneDendPoints$site,levels(cloneDendPoints$site)[c(4,2,5,1,3)])
NocloneDendA = ggplot() +
geom_segment(data = segment(cloneDData), aes(x = x, y = y, xend = xend, yend = yend2), size = 0.5) +
geom_point(data = cloneDendPoints, aes(x = x, y = y, fill = pop, shape = site), size = 4, stroke = 0.25) +
scale_fill_manual(values = c("#AFDE62", "#FF8C8D", "mediumpurple3"), name = "Lineage") +
scale_shape_manual(values = c(25, 22, 23, 24, 21), name = "Population") +
guides(fill = guide_legend(override.aes = list(shape = 21, size = 6), order = 1)) +
labs(y = "Genetic distance (1 - IBS)") +
theme_classic()
NocloneDend = NocloneDendA + theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.line.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(size = 16, color = "black", angle = 90),
axis.text.y = element_text(size = 14, color = "black"),
axis.line.y = element_line(),
axis.ticks.y = element_line(),
panel.grid = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
legend.position = "bottom",
legend.box = "vertical")
NocloneDend
ggsave("figures/NocloneDend_GENOME_shapes.tiff", plot = NocloneDend, height = 5, width = 12, units = "in", dpi = 600)
hetMelt = melt(het, id.vars = c("sample", "Population"), variable.name = "type", value.name = "heterozygosity")
#packages: tidyverse, rstatix
#Read in population data
popData = read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Population" = lineage)
popData$a = c(0:35)
popData$Population = factor(popData$Population)
#across all RAD loci, SNPs and not SNPs
#all loci within lineages, then thinned out to only ones present across all 3 sites
hetAll = read.table("data_files/pastHet")
colnames(hetAll) = c("sample", "All")
hetAll$sample = popData$sample
#remove admixed samples
hetAll <- hetAll[-c(3, 9, 15, 30), ]
pastBreed = read.delim("data_files/filtRelate")
pastBreed2 = pastBreed %>% group_by(a) %>% select("inbreed" = Fa)
pastBreed3 = pastBreed %>% group_by(b) %>% select("inbreed" = Fb)
pastBreed = bind_rows(pastBreed2, pastBreed3) %>% group_by(a) %>% summarise("inbreed" = mean(inbreed))
#removing admixed samples
pastBreed <- pastBreed[-c(3, 9, 15, 30), ]
#now that have removed admixed samples from above dataframes, import new popData with admixed samples removed
popData = read.csv("data_files/poritesastreoidesMetaData_clonesremoved_NOADMIX.csv") %>% select("sample" = tube_id, "Population" = lineage)
het = left_join(popData, hetAll, by = "sample") %>% mutate("inbreed" = pastBreed$inbreed)
hetStats = het %>% group_by() %>% dplyr::summarise(N = n(), meanAll = mean(All), sdAll = sd(All), seAll = sd(All)/sqrt(N), meanInbreed = mean(inbreed), sdInbreed = sd(inbreed), seInbreed = sd(inbreed)/sqrt(N))
min(hetStats$meanAll, na.rm = TRUE)
max(hetStats$meanAll, na.rm = TRUE)
hetAllLm = lm(data = het, All~Population)
inbreedLm = lm(data = het, inbreed~Population)
#summarizing ou
hetAllANOVA = summary(aov(hetAllLm))
hetAllANOVA
hetAllpwc <- het %>% tukey_hsd(All~Population)
hetAllpwc
#Green different from purple & pink, but purple & pink not diff from each other
#majority of non-clonal things were green, makes sense that across all loci it has higher hetero
inbreedANOVA = summary(aov(inbreedLm))
inbreedANOVA
#not significant
hetTab = hetStats
hetMelt = melt(het, id.vars = c("sample", "Population"), variable.name = "type", value.name = "heterozygosity")
kColPal3 = c("#AFDE62", "#FF8C8D", "mediumpurple3")
hetTheme = theme(axis.title.x = element_text(color = "black", size = 12),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_text(color = "black", size = 12),
axis.text.y = element_text(color = "black", size = 10),
axis.ticks.y = element_line(color = "black"),
legend.position = "right",
legend.key.size = unit(0.5, 'cm'),
panel.border = element_rect(color = "black"),
panel.background = element_rect(fill = "white"),
plot.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
dodge <- position_dodge(width = 1)
#depth
depth_comp <- list(c("Pink", "Green"), c("Purple", "Pink"))
depLin = ggplot(data = popData_depth, aes(x = Population, y = Depth, fill = Population)) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Lineage") +
ylab("Depth (m)") +
scale_y_reverse() +
scale_fill_manual(values = kColPal3) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = depth_comp, label = "p.signif", label.y = c(-2, -5))
ggsave("figures/heterozygosityPlot_pval.tiff", plot = hetPlots, width = 22, height = 16, units = "cm", dpi = 600)
hetPlots
hetPlots = ((depLin | hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
#using data with clones included, but extra technical replicates removed
popData_depth = read.csv("data_files/poritesastreoidesMetaData_NOADMIX_notechreps.csv") %>% select("sample" = tube_id, "Population" = lineage, "Depth" = "collection_depth_m")
depthAov = aov(Depth ~ Population, data = popData_depth)
summary(depthAov)
#            Df   Sum Sq  Mean Sq   F value   Pr(>F)
#Population   2   925     462.6     10.14     0.000126 ***
#Residuals   75   3421    45.6
TukeyHSD(depthAov)
#$Population
#                  diff        lwr       upr     p adj
#Pink-Green    10.13446   4.030675 16.238253 0.0004748
#Purple-Green  -2.97000  -7.795469  1.855469 0.3102524
#Purple-Pink  -13.10446 -20.261791 -5.947137 0.0001124
hetPlots = ((depLin | hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
depLin = ggplot(data = popData_depth, aes(x = Population, y = Depth, fill = Population)) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Lineage") +
ylab("Depth (m)") +
scale_y_reverse() +
scale_fill_manual(values = kColPal3) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = depth_comp, label = "p.signif", label.y = c(-2, -5))
hetPlots = ((depLin | hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
hetPlotAll = ggplot(data = subset(hetMelt, subset = hetMelt$type == "All"), aes(x = Population, y = heterozygosity, fill = Population)) +
geom_point(aes(color = Population),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Lineage") +
ylab("Heterozygosity (all loci)") +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = kColPal3) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = hetAll_comp, label = "p.signif", label.y = c(0.00155, 0.00125))
#heterzygosity across all loci
hetAll_comp <- list( c("Green", "Pink"), c("Green", "Purple"))
hetAll_comp <- list( c("Green", "Pink"), c("Green", "Purple"))
hetPlotAll = ggplot(data = subset(hetMelt, subset = hetMelt$type == "All"), aes(x = Population, y = heterozygosity, fill = Population)) +
geom_point(aes(color = Population),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Lineage") +
ylab("Heterozygosity (all loci)") +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = kColPal3) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = hetAll_comp, label = "p.signif", label.y = c(0.00155, 0.00125))
#inbreeding
inbreedingPlot = ggplot(data = het, aes(x = Population, y = inbreed, fill = Population)) +
geom_point(aes(color = Population), shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
coord_cartesian(ylim = c(0, 0.12)) +
xlab("Lineage") +
ylab("Inbreeding coefficient") +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = kColPal3) +
theme_bw() +
hetTheme
hetPlots = ((depLin | hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
ggsave("figures/heterozygosityPlot_pval.tiff", plot = hetPlots, width = 22, height = 16, units = "cm", dpi = 600)
ggsave("figures/heterozygosityPlot_pval.tiff", plot = hetPlots, width = 22, height = 10, units = "cm", dpi = 600)
library(tidyverse)
fileList = substr(list.files("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/bayesAss/", "BA3trace.*.txt$"),1,10)
bayesian_deviance <- function(trace, burnin = 0, sampling.interval = 0){
if(burnin == 0) stop('No burnin specified')
if(sampling.interval == 0) stop('No sampling interval specified')
range <- (trace$State > burnin & trace$State %% sampling.interval == 0)
D <- -2*mean(trace$LogProb[range])
return(D)
}
for(i in 1:length(fileList)){
assign(fileList[i], read.delim(paste("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/bayesAss/", fileList[i], ".txt", sep = ""))) %>% dplyr::select(-last_col())
print(paste(fileList[i], bayesian_deviance(get(fileList[i]), burnin = 2000000, sampling.interval = 100)))
}
bayesAss = read.delim("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/bayesAss/BA3trace01.txt") %>% filter(State > 2000000) %>% dplyr::select(-State, -LogProb, -X)
baMean = bayesAss %>% summarise(across(everything(), list(mean))) %>% t() %>% as_tibble() %>% rename(., mean=V1) %>% mutate(pops = colnames(bayesAss))
baSumm = bayesAss %>% summarise(across(everything(), list(median))) %>% t() %>% as_tibble() %>% rename(., median=V1) %>% mutate(pops = baMean$pops, mean = round(baMean$mean, 3)) %>% relocate(median, .after = mean)
#takes median and makes it only 3 decimal places
baSumm$median = round(baSumm$median, 3)
library(TeachingDemos)
baHpd =as.data.frame(t(sapply(bayesAss, emp.hpd)))
colnames(baHpd) = c("hpdLow", "hpdHigh")
baHpd$pops = rownames(baHpd)
library(LaplacesDemon)
ESS = as.data.frame(sapply(bayesAss, ESS))
baSumm = baSumm %>% left_join(baHpd)
baSumm$hpdLow = round(baSumm$hpdLow, 3)
baSumm$hpdHigh = round(baSumm$hpdHigh, 3)
baSumm$ESS = ESS
#figure out how your pops are numbered by looking at one of your BAOut files
## Population Index -> Population Label:
#0->jupiter
#1->westpalm
#2->boynton
#3->stlucie
#4->pompano
#i and j are the sink & source populations
#i is the sink, j is the source
#write out how you want it to appear on your stepwise plot
popi = rep(c("Jupiter", "West Palm Beach", "Boynton Beach", "St. Lucie Reef", "Ft. Lauderdale"), each = 5)
popj = rep(c("Jupiter", "West Palm Beach", "Boynton Beach", "St. Lucie Reef", "Ft. Lauderdale"), times = 5)
baSumm = baSumm %>% mutate(pop.i = popi, pop.j = popj) %>% relocate(c(pop.i, pop.j), .after = pops) %>% dplyr::select(-pops)
baSumm$pop.i = factor(baSumm$pop.i)
#levels(baSumm$pop.i)
baSumm$pop.i = factor(baSumm$pop.i, levels = levels(baSumm$pop.i)[c(4, 3, 5, 1, 2)])
baSumm$pop.j = factor(baSumm$pop.j)
baSumm$pop.j = factor(baSumm$pop.j, levels = levels(baSumm$pop.j)[c(4, 3, 5, 1, 2)])
library(ggplot2)
library(paletteer)
baSumm$mean = sprintf('%.3f', baSumm$mean)
baSumm$hpdLow = sprintf('%.3f', baSumm$hpdLow)
baSumm$hpdHigh = sprintf('%.3f', baSumm$hpdHigh)
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
migrateA = ggplot(data = baSumm, aes(pop.i, pop.j, fill = as.numeric(as.character(mean)))) +
geom_tile(color = "white") +
geom_segment(data = baSumm, aes(x = 0.4755, xend = -0.65, y = pop.j, yend = pop.j, color = pop.j), size = 16) + #changing y bar of pop names
geom_segment(data = baSumm, aes(x = pop.i, xend = pop.i, y = 0.45, yend = -0.1, color = pop.i), size = 35) + #changing x bar of pop names
scale_color_manual(values = flPal[c(1:5, 1:5)], guide = NULL) +
scale_fill_gradientn(colours = paletteer_c("viridis::viridis", n = 10)[3:10], limit = c(0,0.23), space = "Lab", name = expression(paste(italic("m"))), na.value = "gray40",  guide = "colourbar", values = c(0, 0.05, 0.1, 0.15, 0.2,0.5,0.75,1)) + #key for color scale of heatmap
geom_text(data = baSumm, aes(x = pop.i, y = pop.j, label = paste(mean, "\n", sep = "")), color = ifelse(baSumm$mean > 0.6, "white", "gray4"), fontface = "bold") + #format for center values (i.e. PMP vs PMP)
geom_text(data = baSumm, aes(x = pop.i, y = pop.j, label = paste("\n(",hpdLow,"–",hpdHigh, ")", sep = "")), color = ifelse(baSumm$mean > 0.6, "white", "gray4"), size = 3.25) +
labs(x = "Sink", y = "Source") +
guides(fill = guide_colorbar(barwidth = 1, barheight = 10, title.position = "top", title.hjust = 0.5, frame.colour = "black", frame.linewidth = 1, ticks.colour = "black")) + #m coefficient scale key
scale_y_discrete(limits = rev(levels(baSumm$pop.i))[c(1:5)], position = "left") +
# scale_x_discrete() +
coord_cartesian(xlim = c(1, 5), ylim = c(1, 5), clip = "off") +
theme_minimal()
migrate = migrateA + theme(
axis.text.x = element_text(vjust = 1, size = 9, hjust = 0.5, color = "black"),
axis.text.y = element_text(size = 9, color = "black"),
axis.title.x = element_text(size = 14, vjust = -1.5),
axis.title.y = element_text(size = 14),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
legend.position = "right",
legend.direction = "vertical",
legend.title = element_text(size = 14, face = "bold"),
legend.text = element_text(size = 10)
)
migrate
ggsave("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/figures/migrate_gray.tiff", plot = migrate, width = 20, height = 8, units = "cm", dpi = 600)
