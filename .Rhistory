#  scale_fill_manual(values = kColPal3) +
#  scale_color_manual(values = kColPal3) +
#  theme_bw() +
#  hetTheme +
#  stat_compare_means(comparisons = relate_comp, label = "p.signif", label.y = c(0.90, 0.25, 0.85))
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
hetPlots
View(hetMelt)
View(hetPlotAll)
hetMelt = melt(het, id.vars = c("sample", "Population"), variable.name = "type", value.name = "heterozygosity")
hetMelt = melt(het, id.vars = c("sample", "Population"), variable.name = "type", value.name = "heterozygosity")
hetPlotAll = ggplot(data = subset(hetMelt, subset = hetMelt$type == "All"), aes(x = Lineage, y = heterozygosity, fill = Population)) +
geom_point(aes(color = Population),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Lineage") +
ylab("Heterozygosity") +
ggtitle("All loci") +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = kColPal3) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = hetAll_comp, label = "p.signif", label.y = c(0.0017))
inbreedingPlot = ggplot(data = het, aes(x = Lineage, y = inbreed, fill = Population)) +
geom_point(aes(color = Population), shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
coord_cartesian(ylim = c(0, 0.12)) +
xlab("Lineage") +
ylab("Inbreeding coefficient") +
ggtitle("Inbreeding") +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = kColPal3) +
theme_bw() +
hetTheme
inbreedingPlot
inbreedingPlot = ggplot(data = het, aes(x = Population, y = inbreed, fill = Population)) +
geom_point(aes(color = Population), shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
coord_cartesian(ylim = c(0, 0.12)) +
xlab("Lineage") +
ylab("Inbreeding coefficient") +
ggtitle("Inbreeding") +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = kColPal3) +
theme_bw() +
hetTheme
inbreedingPlot
hetPlotAll = ggplot(data = subset(hetMelt, subset = hetMelt$type == "All"), aes(x = Population, y = heterozygosity, fill = Population)) +
geom_point(aes(color = Population),shape = 21, position = position_jitterdodge(seed = 1, dodge.width = 1), size = 2, alpha = 0.7) +
geom_boxplot(size = 0.5, alpha = 0.7, position = dodge, color = "gray35", outlier.shape = NA) +
xlab("Lineage") +
ylab("Heterozygosity") +
ggtitle("All loci") +
scale_fill_manual(values = kColPal3) +
scale_color_manual(values = kColPal3) +
theme_bw() +
hetTheme +
stat_compare_means(comparisons = hetAll_comp, label = "p.signif", label.y = c(0.0017))
hetPlotAll
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank()) +
guides(fill=guide_legend(title="Lineage"))
hetPlots
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank()) +
labs(Population="Lineage")
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank(),
labs(Population="Lineage"))
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank()) +
guides(Population = guide_legend(title = "Lineage"))
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank()) +
guides(color = guide_legend(title = "Lineage"))
hetPlots
??legend.title
??ggplot2
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank()) +
guides(color = guide_legend(title = "Lineage")) +
labs(col='Lineage')
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank()) +
guides(color = guide_legend(title = "Lineage")) +
labs(col="Lineage")
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank()) +
labs(col="Lineage")
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank()) +
guides(col=guide_legend("Lineage"))
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank()) +
scale_color_discrete("Lineage")
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
scale_color_discrete("Lineage") +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
scale_fill_discrete("Lineage") +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
hetPlots
hetPlots = ((hetPlotAll | inbreedingPlot)) +
plot_annotation(tag_levels = 'a') +
plot_layout(guides = "collect")&
theme(plot.tag = element_text(size = 16),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
legend.position = "right",
#        panel.grid = element_blank(),
plot.background = element_blank(),
legend.key = element_blank(),
legend.background = element_blank())
hetPlots
ggsave("figures/heterozygosityPlot_pval.png", plot = hetPlots, width = 22, height = 16, units = "cm", dpi = 300)
pastMa = as.matrix(read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/pastNoClones.ibsMat"))
View(pastMa)
pastMa = as.matrix(read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/pastNoClones.ibsMat"))
Pca <- prcomp(pastMa, center=T, scale = F)
plot(Pca)
Pca$x[,1]
Summary(Pca)
summary(Pca)
screeplot(Pca, type = "barplot", npcs=10, main="PCA Eigenvalues")
View(Pca)
pastMa = as.matrix(read.table("C:/Users/erin_/Documents/GitHub/SEFL_Pastreoides_2bRAD/data_files/pastNoClones.ibsMat"))
present = list_layers(datasets) %>% dplyr::select(dataset_code, layer_code, name, units, description, contains("cellsize"), version) %>% filter(version == 2.2) %>% filter(layer_code %in% c("BO22_parmean", "BO22_ph", "BO22_dissoxmean_bdmean", "BO22_salinitymean_bdmean", "BO22_nitratemean_bdmean"))
envVar = load_layers(present$layer_code)
popData=read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Population" = region, "depth" = collection_depth_m, "lat" = site_lat, "lon" = site_long)
popData$Population[popData$Population=="Pompano/LBTS"]<-"Ft. Lauderdale"
#Import coordinates of sites
popData=read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Population" = region, "depth" = collection_depth_m, "lat" = site_lat, "lon" = site_long)
library(tidyverse)
#Import coordinates of sites
popData=read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Population" = region, "depth" = collection_depth_m, "lat" = site_lat, "lon" = site_long)
popData$Population[popData$Population=="Pompano/LBTS"]<-"Ft. Lauderdale"
envData = data.frame(popData, raster::extract(envVar, popData[,5:4]))
knitr::opts_chunk$set(echo = TRUE)
# setup rmarkdown environment first
knitr::opts_chunk$set(warning = FALSE, message = FALSE, fig.align = 'left')
options(timeout=600)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(sdmpredictors)
library(tidyverse)
library(vegan)
options(sdmpredictors_datadir="data_files/bioOracle", timeout = max(300, getOption("timeout")))
envData = data.frame(popData, raster::extract(envVar, popData[,5:4]))
present = list_layers(datasets) %>% dplyr::select(dataset_code, layer_code, name, units, description, contains("cellsize"), version) %>% filter(version == 2.2) %>% filter(layer_code %in% c("BO22_parmean", "BO22_ph", "BO22_dissoxmean_bdmean", "BO22_salinitymean_bdmean", "BO22_nitratemean_bdmean"))
datasets = list_datasets(terrestrial = FALSE, marine = TRUE)
present = list_layers(datasets) %>% dplyr::select(dataset_code, layer_code, name, units, description, contains("cellsize"), version) %>% filter(version == 2.2) %>% filter(layer_code %in% c("BO22_parmean", "BO22_ph", "BO22_dissoxmean_bdmean", "BO22_salinitymean_bdmean", "BO22_nitratemean_bdmean"))
envVar = load_layers(present$layer_code)
popData=read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "Population" = region, "depth" = collection_depth_m, "lat" = site_lat, "lon" = site_long)
popData$Population[popData$Population=="Pompano/LBTS"]<-"Ft. Lauderdale"
envData = data.frame(popData, raster::extract(envVar, popData[,5:4]))
#moving forward with variables with collinearities less than 0.7
#vif won't run w calcite or carbon phyto mean, must also have collinearities?
envData2 = envData %>% select(depth, lat, BO22_nitratemean_bdmean)
vif = diag(solve(cor(envData2)))
vif
envData2 = data.frame(Pca, raster::extract(envData2, Pca[,1:2]))
PCs <- scores(pca, choices=c(1:3), scaling=0)
PCs <- scores(Pca, choices=c(1:3), scaling=0)
PCs
PCs <- scores(Pca, choices=c(1:3), display="sites" scaling=0)
PCs <- scores(Pca, choices=c(1:3), display="sites", scaling=0)
PCs
envData2 = data.frame(envData2, PCs)
View(envData2)
##start running ANOVA/models here
rda1 = dbrda(pastMa ~ ., data = envData2)
RsquareAdj(rda1)
anova.cca(rda1)
rda0 = dbrda(pastMa ~ 1, data = envData2)
rda1 = dbrda(pastMa ~ ., data = envData2)
set.seed(092)
bestDbrda <- ordiR2step(rda0, rda1)
bestDbrda$anova
plot(Pca)
#moving forward with variables with collinearities less than 0.7
#vif won't run w calcite or carbon phyto mean, must also have collinearities?
envData2 = envData %>% select(depth, lat, BO22_nitratemean_bdmean)
#and now add into envData2
envData2 = data.frame(envData2, PCs)
View(envData2)
#nitrate not selected for in best model, so removing at this step
#PAR deemed not ecologically relevant after further examination
model = envData2 %>% dplyr::select("Depth" = depth, "Latitude" = lat, "PC1" = PC1, "PC2" = PC2, "PC3" = PC3)
pastDbrda = dbrda(pastMa ~ Depth + Latitude + PC1 + PC2 + PC3, model)
pastRdaVar = round(pastDbrda$CA$eig/sum(pastDbrda$CA$eig)*100, 1)
head(pastRdaVar)
pastRdaPoints = as.data.frame(scores(pastDbrda)$sites)
pastRdaPoints$sample = popData$sample
head(pastRdaPoints)
pastDbrdaData1 = popData %>% left_join(pastRdaPoints)
head(pastDbrdaData1)
tail(pastDbrdaData1)
envLoad = as.data.frame(pastDbrda$CCA$biplot)
envLoad$var = row.names(envLoad)
pastDbrdaData = merge(pastDbrdaData1, aggregate(cbind(mean.x = dbRDA1, mean.y = dbRDA2)~Population, pastDbrdaData1, mean), by="Population")
pastDbrdaData$Population = factor(pastDbrdaData$Population)
levels(pastDbrdaData$Population)
pastDbrdaData$Population = factor(pastDbrdaData$Population, levels(pastDbrdaData$Population)[c(4, 3, 5, 1, 2)])
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
library(paletteer)
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.25, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
library(vcfR)
library(adegenet)
library(poppr)
#packages: tidyverse, vcfR, adegenet, poppr
#reading in bcf file
pastVcf = read.vcfR("data_files/pastNoClones.bcf", verbose = TRUE)
#convert to genlight files for poppr
pastGenlightPopulation = vcfR2genlight(pastVcf, n.cores = 1)
#taking metadata file, without technical replicates & clones, reads in population data for each sample
popData = read.csv("data_files/poritesastreoidesMetaData_clonesremoved.csv") %>% select("sample" = tube_id, "pop" = region)
#setting up amova
strata(pastGenlightPopulation) = data.frame(popData)
setPop(pastGenlightPopulation) = ~pop
#Runs AMOVA looking at samples by region
amova <- poppr.amova(pastGenlightPopulation, ~pop)
amova
set.seed(694)
amovasignif <- randtest(amova, nrepet = 999)
amovasignif$names
amovasignif$obs
amovasignif$pvalue
amovaPerc = paste(round(amova$componentsofcovariance$`%`[1], 2), "%",sep="")
amovaP = amovasignif$pvalue[3]
amovaPerc
amovaP
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.25, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
pastDbrdaPlot1 = pastDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
pca <- rda(pastMa[,-1], scale=T)
plot(pca)
screeplot(pca, type = "barplot", npcs=10, main="PCA Eigenvalues")
#extracting those to add into dataframe
PCs <- scores(pca, choices=c(1:3), display="sites", scaling=0)
PCs
#and now add into envData2
envData2 = data.frame(envData2, PCs)
View(envData2)
#moving forward with variables with collinearities less than 0.7
#vif won't run w calcite or carbon phyto mean, must also have collinearities?
envData2 = envData %>% select(depth, lat, BO22_nitratemean_bdmean)
#and now add into envData2
envData2 = data.frame(envData2, PCs)
View(envData2)
model = envData2 %>% dplyr::select("Depth" = depth, "Latitude" = lat, "PC1" = PC1, "PC2" = PC2, "PC3" = PC3)
pastDbrda = dbrda(pastMa ~ Depth + Latitude + PC1 + PC2 + PC3, model)
pastRdaVar = round(pastDbrda$CA$eig/sum(pastDbrda$CA$eig)*100, 1)
head(pastRdaVar)
pastRdaPoints = as.data.frame(scores(pastDbrda)$sites)
pastRdaPoints$sample = popData$sample
head(pastRdaPoints)
pastDbrdaData1 = popData %>% left_join(pastRdaPoints)
head(pastDbrdaData1)
tail(pastDbrdaData1)
envLoad = as.data.frame(pastDbrda$CCA$biplot)
envLoad$var = row.names(envLoad)
pastDbrdaData = merge(pastDbrdaData1, aggregate(cbind(mean.x = dbRDA1, mean.y = dbRDA2)~Population, pastDbrdaData1, mean), by="Population")
pastDbrdaData$Population = factor(pastDbrdaData$Population)
levels(pastDbrdaData$Population)
pastDbrdaData$Population = factor(pastDbrdaData$Population, levels(pastDbrdaData$Population)[c(4, 3, 5, 1, 2)])
flPal = paletteer_d("LaCroixColoR::PeachPear")[c(1,2,3,4,5)]
pastDbrdaPlotA = ggplot(pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, color = Population, fill = Population)) +
geom_hline(yintercept = 0, color = "gray90", size = 0.5) + #x axis
geom_vline(xintercept = 0, color = "gray90", size = 0.5) + #y axis
geom_point(data = pastDbrdaData, aes(x = dbRDA1, y = dbRDA2, fill = Population, color = Population), size = 2, shape = 21, alpha = 0.5, show.legend = FALSE) +
stat_ellipse(data = pastDbrdaData, type = "t", geom = "polygon", alpha = 0.1, show.legend = FALSE) + #adds ellipses
geom_segment(data = envLoad, aes(x = 0, y = 0, xend = dbRDA1, yend = dbRDA2), color = "black", arrow = arrow(length = unit(0.25, "cm"), type = "open"), size = 0.65, inherit.aes = FALSE) +
geom_text(data = envLoad, aes(x = dbRDA1+0.25, y = dbRDA2, label = var), color = "black", size = 3, inherit.aes = FALSE) +
geom_point(data = pastDbrdaData, aes(x = mean.x, y = mean.y, fill = Population), shape = 21, size = 5, color = "black") + #pop centroids indicated by large circles
annotate(geom = "text", x = 0.7, y = -1.5, label = bquote("AMOVA:"~.(amovaPerc)*","~italic(p)~" = "~.(amovaP))) +
labs(x = paste("dbRDA1 (", pastRdaVar[1]," %)", sep = ""), y =  paste("dbRDA2 (", pastRdaVar[2], " %)", sep = "")) +
scale_fill_manual(values = flPal, name = "Population") +
scale_color_manual(values = flPal, name = "Population") +
guides(shape = guide_legend(override.aes = list(size = 2, stroke = 0.5, alpha = NA), order = 2), fill = guide_legend(override.aes = list(shape =   22, size = 4, color = flPal, alpha = NA), order = 1)) +
theme_bw()
pastDbrdaPlot1 = pastDbrdaPlotA +
theme(axis.title.x = element_text(color = "black", size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_text(color = "black", size = 10),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
#        legend.background = element_rect(fill = "transparent", colour = NA),
#        legend.key = element_rect(fill = "transparent", colour = NA),
#        plot.background = element_rect(fill = "transparent", colour = NA)
panel.border = element_rect(color = "black", size = 1),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
pastDbrdaPlot1
#moving forward with variables with collinearities less than 0.7
#vif won't run w calcite or carbon phyto mean, must also have collinearities?
envData2 = envData %>% select(depth, lat, BO22_nitratemean_bdmean)
vif = diag(solve(cor(envData2)))
vif
pca <- rda(pastMa[,-1], scale=T)
plot(pca)
screeplot(pca, type = "barplot", npcs=10, main="PCA Eigenvalues")
PCs <- scores(pca, choices=c(1:3), display="sites", scaling=0)
PCs
#and now add into envData2
envData2 = data.frame(envData2, PCs)
rda1 = dbrda(pastMa ~ ., data = envData2)
RsquareAdj(rda1)
anova.cca(rda1)
rda0 = dbrda(pastMa ~ 1, data = envData2)
rda1 = dbrda(pastMa ~ ., data = envData2)
RDAfull <- rda(pastMa ~ lat + depth + BO22_nitratemean_bdmean, envData2)
set.seed(092)
bestDbrda <- ordiR2step(rda0, RDAfull)
bestDbrda$anova
## Full model
pRDAfull <- rda(pastMa ~ PC1 + PC2 + PC3 + Latitude + Depth,  envData2)
## Full model
pRDAfull <- rda(pastMa ~ PC1 + PC2 + PC3 + latitude + Depth,  envData2)
## Full model
pRDAfull <- rda(pastMa ~ PC1 + PC2 + PC3 + lat + Depth,  envData2)
## Full model
pRDAfull <- rda(pastMa ~ PC1 + PC2 + PC3 + lat + depth,  envData2)
RsquareAdj(pRDAfull)
anova(RDAfull)
